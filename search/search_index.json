{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutoDispose AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a provided scope via disposal/cancellation. Overview Often (especially in mobile applications), Rx subscriptions need to stop in response to some event (for instance, when Activity#onStop() executes in an Android app). In order to support this common scenario in RxJava 2, we built AutoDispose. The idea is simple: construct your chain like any other, and then at subscription you simply drop in the relevant factory call + method for that type as a converter. In everyday use, it usually looks like this: myObservable . doStuff () . as ( autoDisposable ( this )) // The magic . subscribe ( s - ...); By doing this, you will automatically unsubscribe from myObservable as indicated by your scope - this helps prevent many classes of errors when an observable emits and item, but the actions taken in the subscription are no longer valid. For instance, if a network request comes back after a UI has already been torn down, the UI can t be updated - this pattern prevents this type of bug. autoDisposable() The main entry point is via static factory autoDisposable() methods in the AutoDispose class. There are two overloads: Completable and ScopeProvider . They return an AutoDisposeConverter object that implements all the RxJava Converter interfaces for use with the as() operator in RxJava types. Completable (as a scope) The Completable semantic is modeled after the takeUntil() operator, which accepts an Observable whose first emission is used as a notification to signal completion. This is logically the behavior of a Single , so we choose to make that explicit. Since the type doesn t matter, we simplify this further to just be a Completable , where the scope-end emission is just a completion event. All scopes in AutoDispose eventually resolve to a Completable that emits the end-of-scope notification in onComplete . onError will pass through to the underlying subscription. ScopeProvider public interface ScopeProvider { CompletableSource requestScope () throws Exception ; } ScopeProvider is an abstraction that allows objects to expose and control and provide their own scopes. This is particularly useful for objects with simple scopes ( stop when I stop ) or very custom state that requires custom handling. Note that Exceptions can be thrown in this, and will be routed through onError() . If the thrown exception is an instance of OutsideScopeException , it will be routed through any OutsideScopeHandler s (more below) first, and sent through onError() if not handled. AutoDisposePlugins Modeled after RxJava s plugins, this allows you to customize the behavior of AutoDispose. OutsideScopeHandler When a scope is bound to outside of its allowable boundary, AutoDispose will send an error event with an OutsideScopeException to downstream consumers. If you want to customize this behavior, you can use AutoDisposePlugins#setOutsideScopeHandler to intercept these exceptions and rethrow something else or nothing at all. Example AutoDisposePlugins . setOutsideScopeHandler ( t - { // Swallow the exception, or rethrow it, or throw your own! }) A good use case of this is, say, just silently disposing/logging observers outside of scope exceptions in production but crashing on debug. The supported mechanism to throw this is in ScopeProvider#requestScope() implementations. FillInOutsideScopeExceptionStacktraces If you have your own handling of exceptions in scope boundary events, you can optionally set AutoDisposePlugins#setFillInOutsideScopeExceptionStacktraces to false . This will result in AutoDispose not filling in stacktraces for exceptions, for a potential minor performance boost. AutoDisposeAndroidPlugins Similar to AutoDisposePlugins , this allows you to customize the behavior of AutoDispose in Android environments. MainThreadChecker This plugin allows for supplying a custom BooleanSupplier that can customize how main thread checks work. The conventional use case of this is Android JUnit tests, where the Looper class is not stubbed in the mock android.jar and fails explosively when touched. Another potential use of this at runtime to customize checks for more fine-grained main thread checks behavior. Example AutoDisposeAndroidPlugins . setOnCheckMainThread (() - { return true ; // Use whatever heuristics you prefer. }) Behavior Under the hood, AutoDispose decorates RxJava s real observer with a custom AutoDisposing observer. This custom observer leverages the scope to create a disposable, auto-disposing observer that acts as a lambda observer (pass-through) unless the underlying scope CompletableSource emits onComplete . Both scope emission and upstream termination result in immediate disposable of both the underlying scope subscription and upstream disposable. These custom AutoDisposing observers are considered public read-only API, and can be found under the observers package. They also support retrieval of the underlying observer via delegateObserver() methods. Read-only API means that the public signatures will follow semantic versioning, but we may add new methods in the future (which would break compilation if you make custom implementations!). To read this information, you can use RxJava s onSubscribe hooks in RxJavaPlugins to watch for instances of these observers. Support/Extensions Flowable , ParallelFlowable , Observable , Maybe , Single , and Completable are all supported. Implementation is solely based on their Observer types, so conceivably any type that uses those for subscription should work. Extensions There are also a number of extension artifacts available, detailed below. LifecycleScopeProvider public interface LifecycleScopeProvider E extends ScopeProvider { Observable E lifecycle (); Function E , E correspondingEvents (); E peekLifecycle (); // Inherited from ScopeProvider CompletableSource requestScope (); } A common use case for this is objects that have implicit lifecycles, such as Android s Activity , Fragment , and View classes. Internally at subscription-time, AutoDispose will resolve a CompletableSource representation of the target end event in the lifecycle, and exposes an API to dictate what corresponding events are for the current lifecycle state (e.g. ATTACH - DETACH ). This also allows you to enforce lifecycle boundary requirements, and by default will error if the lifecycle has either not started yet or has already ended. LifecycleScopeProvider is a special case targeted at binding to things with lifecycles. Its API is as follows: - lifecycle() - returns an Observable of lifecycle events. This should be backed by a BehaviorSubject or something similar ( BehaviorRelay , etc). - correspondingEvents() - a mapping of events to corresponding ones, i.e. Attach - Detach. - peekLifecycle() - returns the current lifecycle state of the object. In requestScope() , the implementation expects to these pieces to construct a CompletableSource representation of the proper end scope, while also doing precondition checks for lifecycle boundaries. If a lifecycle has not started, it will send you to onError with a LifecycleNotStartedException . If the lifecycle as ended, it is recommended to throw a LifecycleEndedException in your correspondingEvents() mapping, but it is up to the user. To simplify implementations, there s an included LifecycleScopes utility class with factories for generating CompletableSource representations from LifecycleScopeProvider instances. autodispose-lifecycle contains the core LifecycleScopeProvider and LifecycleScopes APIs as well as a convenience test helper. Android There are three artifacts with extra support for Android: * autodispose-android has a ViewScopeProvider for use with Android View classes. * autodispose-android-archcomponents has a AndroidLifecycleScopeProvider for use with LifecycleOwner and Lifecycle implementations. * autodispose-android-archcomponents-test has a TestLifecycleOwner for use in testing. Note that the project is compiled against Java 8. If you need support for lower Java versions, you should use D8 (Android Gradle Plugin 3.2+) or desugar as needed (depending on the build system). Kotlin Kotlin extensions are bundled with almost every artifact. RxLifecycle As of 0.4.0 there is an RxLifecycle interop module under autodispose-rxlifecycle . This is for interop with RxLifecycle s LifecycleProvider interfaces. Philosophy Each factory returns a subscribe proxies upon application that just proxy to real subscribe calls under the hood to AutoDisposing implementations of the types. These types decorate the actual observer at subscribe-time to achieve autodispose behavior. The types are not exposed directly because autodisposing has ordering requirements; specifically, it has to be done at the end of a chain to properly wrap all the upstream behavior. Lint could catch this too, but we have seen no use cases for disposing upstream (which can cause a lot of unexpected behavior). Thus, we optimize for the common case, and the API is designed to prevent ordering issues while still being a drop-in one-liner. Motivations Lifecycle management with RxJava and Android is nothing new, so why yet another tool? Two common patterns for binding execution in RxJava that we used prior to this were as follows: CompositeSubscription field that all subscriptions had to be manually added to. RxLifecycle , which works via compose() to resolve the lifecycle end event and ultimately transform the given observable to takeUntil() that event is emitted. Both implementations are elegant and work well, but came with caveats that we sought to revisit and solve in AutoDispose. CompositeSubscription requires manual capture of the return value of subscribe calls, and gets tedious to reason about with regards to binding subscription until different events. RxLifecycle solves the caveats of CompositeSubscription use by working in a dead-simple API and handling resolution of corresponding events. It works great for Observable types, but due to the nature of how takeUntil() works, we found that Single and Completable usage was risky to use (particularly in a large team with varying levels of RxJava experience) considering lifecycle interruption would result in a downstream CancellationException every time. It s the contract of those types, but induced a lot of ceremony for what would otherwise likely be our most commonly used type ( Single ). Even with Observable , we were still burned occasionally by the completion event still coming through to an unsuspecting engineer. Another caveat we often ran into (and later aggressively linted against) was that the compose() call had ordering implications, and needed to be as close to the subscribe() call as possible to properly wrap upstream. If binding to views, there were also threading requirements on the observable chain in order to work properly. At the end of the day, we wanted true disposal/unsubscription-based behavior, but with RxLifecycle-esque semantics around scope resolution. RxJava 2 s Observer interfaces provide the perfect mechanism for this via their onSubscribe() callbacks. The result is de-risked Single / Completable usage, no ordering concerns, no threading concerns (fingers crossed), and true disposal with no further events of any kind upon scope end. We re quite happy with it, and hope the community finds it useful as well. Special thanks go to Dan Lew (creator of RxLifecycle), who helped pioneer this area for RxJava in android and humored many of the discussions around lifecycle handling over the past couple years that we ve learned from. Much of the internal scope resolution mechanics of AutoDispose are inspired by RxLifecycle. RxJava 1 This pattern is sort of possible in RxJava 1, but only on Subscriber (via onStart() ) and CompletableObserver (which matches RxJava 2 s API). We are aggressively migrating our internal code to RxJava 2, and do not plan to try to backport this to RxJava 1. Static analysis Error Prone There is an optional error-prone checker you can use to enforce use of AutoDispose. Integration steps and more details can be found on the wiki Lint Check AutoDispose ships with a lint check that detects missing AutoDispose scope within defined scoped elements. Integration steps and more details can be found on the wiki Download Java: implementation com.uber.autodispose:autodispose:x.y.z LifecycleScopeProvider: implementation com.uber.autodispose:autodispose-lifecycle:x.y.z Android extensions: implementation com.uber.autodispose:autodispose-android:x.y.z Android Architecture Components extensions: implementation com.uber.autodispose:autodispose-android-archcomponents:x.y.z Android Architecture Components Test extensions: implementation com.uber.autodispose:autodispose-android-archcomponents-test:x.y.z RxLifecycle interop: autodispose-rxlifecycle implementation com.uber.autodispose:autodispose-rxlifecycle:x.y.z autodispose-rxlifecycle3 implementation com.uber.autodispose:autodispose-rxlifecycle3:x.y.z Javadocs and KDocs for the most recent release can be found here: https://uber.github.io/AutoDispose/1.x/ Snapshots of the development version are available in Sonatype s snapshots repository . License Copyright (C) 2017 Uber Technologies Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#autodispose","text":"AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a provided scope via disposal/cancellation.","title":"AutoDispose"},{"location":"#overview","text":"Often (especially in mobile applications), Rx subscriptions need to stop in response to some event (for instance, when Activity#onStop() executes in an Android app). In order to support this common scenario in RxJava 2, we built AutoDispose. The idea is simple: construct your chain like any other, and then at subscription you simply drop in the relevant factory call + method for that type as a converter. In everyday use, it usually looks like this: myObservable . doStuff () . as ( autoDisposable ( this )) // The magic . subscribe ( s - ...); By doing this, you will automatically unsubscribe from myObservable as indicated by your scope - this helps prevent many classes of errors when an observable emits and item, but the actions taken in the subscription are no longer valid. For instance, if a network request comes back after a UI has already been torn down, the UI can t be updated - this pattern prevents this type of bug.","title":"Overview"},{"location":"#autodisposable","text":"The main entry point is via static factory autoDisposable() methods in the AutoDispose class. There are two overloads: Completable and ScopeProvider . They return an AutoDisposeConverter object that implements all the RxJava Converter interfaces for use with the as() operator in RxJava types.","title":"autoDisposable()"},{"location":"#completable-as-a-scope","text":"The Completable semantic is modeled after the takeUntil() operator, which accepts an Observable whose first emission is used as a notification to signal completion. This is logically the behavior of a Single , so we choose to make that explicit. Since the type doesn t matter, we simplify this further to just be a Completable , where the scope-end emission is just a completion event. All scopes in AutoDispose eventually resolve to a Completable that emits the end-of-scope notification in onComplete . onError will pass through to the underlying subscription.","title":"Completable (as a scope)"},{"location":"#scopeprovider","text":"public interface ScopeProvider { CompletableSource requestScope () throws Exception ; } ScopeProvider is an abstraction that allows objects to expose and control and provide their own scopes. This is particularly useful for objects with simple scopes ( stop when I stop ) or very custom state that requires custom handling. Note that Exceptions can be thrown in this, and will be routed through onError() . If the thrown exception is an instance of OutsideScopeException , it will be routed through any OutsideScopeHandler s (more below) first, and sent through onError() if not handled.","title":"ScopeProvider"},{"location":"#autodisposeplugins","text":"Modeled after RxJava s plugins, this allows you to customize the behavior of AutoDispose.","title":"AutoDisposePlugins"},{"location":"#outsidescopehandler","text":"When a scope is bound to outside of its allowable boundary, AutoDispose will send an error event with an OutsideScopeException to downstream consumers. If you want to customize this behavior, you can use AutoDisposePlugins#setOutsideScopeHandler to intercept these exceptions and rethrow something else or nothing at all. Example AutoDisposePlugins . setOutsideScopeHandler ( t - { // Swallow the exception, or rethrow it, or throw your own! }) A good use case of this is, say, just silently disposing/logging observers outside of scope exceptions in production but crashing on debug. The supported mechanism to throw this is in ScopeProvider#requestScope() implementations.","title":"OutsideScopeHandler"},{"location":"#fillinoutsidescopeexceptionstacktraces","text":"If you have your own handling of exceptions in scope boundary events, you can optionally set AutoDisposePlugins#setFillInOutsideScopeExceptionStacktraces to false . This will result in AutoDispose not filling in stacktraces for exceptions, for a potential minor performance boost.","title":"FillInOutsideScopeExceptionStacktraces"},{"location":"#autodisposeandroidplugins","text":"Similar to AutoDisposePlugins , this allows you to customize the behavior of AutoDispose in Android environments.","title":"AutoDisposeAndroidPlugins"},{"location":"#mainthreadchecker","text":"This plugin allows for supplying a custom BooleanSupplier that can customize how main thread checks work. The conventional use case of this is Android JUnit tests, where the Looper class is not stubbed in the mock android.jar and fails explosively when touched. Another potential use of this at runtime to customize checks for more fine-grained main thread checks behavior. Example AutoDisposeAndroidPlugins . setOnCheckMainThread (() - { return true ; // Use whatever heuristics you prefer. })","title":"MainThreadChecker"},{"location":"#behavior","text":"Under the hood, AutoDispose decorates RxJava s real observer with a custom AutoDisposing observer. This custom observer leverages the scope to create a disposable, auto-disposing observer that acts as a lambda observer (pass-through) unless the underlying scope CompletableSource emits onComplete . Both scope emission and upstream termination result in immediate disposable of both the underlying scope subscription and upstream disposable. These custom AutoDisposing observers are considered public read-only API, and can be found under the observers package. They also support retrieval of the underlying observer via delegateObserver() methods. Read-only API means that the public signatures will follow semantic versioning, but we may add new methods in the future (which would break compilation if you make custom implementations!). To read this information, you can use RxJava s onSubscribe hooks in RxJavaPlugins to watch for instances of these observers.","title":"Behavior"},{"location":"#supportextensions","text":"Flowable , ParallelFlowable , Observable , Maybe , Single , and Completable are all supported. Implementation is solely based on their Observer types, so conceivably any type that uses those for subscription should work.","title":"Support/Extensions"},{"location":"#extensions","text":"There are also a number of extension artifacts available, detailed below.","title":"Extensions"},{"location":"#lifecyclescopeprovider","text":"public interface LifecycleScopeProvider E extends ScopeProvider { Observable E lifecycle (); Function E , E correspondingEvents (); E peekLifecycle (); // Inherited from ScopeProvider CompletableSource requestScope (); } A common use case for this is objects that have implicit lifecycles, such as Android s Activity , Fragment , and View classes. Internally at subscription-time, AutoDispose will resolve a CompletableSource representation of the target end event in the lifecycle, and exposes an API to dictate what corresponding events are for the current lifecycle state (e.g. ATTACH - DETACH ). This also allows you to enforce lifecycle boundary requirements, and by default will error if the lifecycle has either not started yet or has already ended. LifecycleScopeProvider is a special case targeted at binding to things with lifecycles. Its API is as follows: - lifecycle() - returns an Observable of lifecycle events. This should be backed by a BehaviorSubject or something similar ( BehaviorRelay , etc). - correspondingEvents() - a mapping of events to corresponding ones, i.e. Attach - Detach. - peekLifecycle() - returns the current lifecycle state of the object. In requestScope() , the implementation expects to these pieces to construct a CompletableSource representation of the proper end scope, while also doing precondition checks for lifecycle boundaries. If a lifecycle has not started, it will send you to onError with a LifecycleNotStartedException . If the lifecycle as ended, it is recommended to throw a LifecycleEndedException in your correspondingEvents() mapping, but it is up to the user. To simplify implementations, there s an included LifecycleScopes utility class with factories for generating CompletableSource representations from LifecycleScopeProvider instances. autodispose-lifecycle contains the core LifecycleScopeProvider and LifecycleScopes APIs as well as a convenience test helper.","title":"LifecycleScopeProvider"},{"location":"#android","text":"There are three artifacts with extra support for Android: * autodispose-android has a ViewScopeProvider for use with Android View classes. * autodispose-android-archcomponents has a AndroidLifecycleScopeProvider for use with LifecycleOwner and Lifecycle implementations. * autodispose-android-archcomponents-test has a TestLifecycleOwner for use in testing. Note that the project is compiled against Java 8. If you need support for lower Java versions, you should use D8 (Android Gradle Plugin 3.2+) or desugar as needed (depending on the build system).","title":"Android"},{"location":"#kotlin","text":"Kotlin extensions are bundled with almost every artifact.","title":"Kotlin"},{"location":"#rxlifecycle","text":"As of 0.4.0 there is an RxLifecycle interop module under autodispose-rxlifecycle . This is for interop with RxLifecycle s LifecycleProvider interfaces.","title":"RxLifecycle"},{"location":"#philosophy","text":"Each factory returns a subscribe proxies upon application that just proxy to real subscribe calls under the hood to AutoDisposing implementations of the types. These types decorate the actual observer at subscribe-time to achieve autodispose behavior. The types are not exposed directly because autodisposing has ordering requirements; specifically, it has to be done at the end of a chain to properly wrap all the upstream behavior. Lint could catch this too, but we have seen no use cases for disposing upstream (which can cause a lot of unexpected behavior). Thus, we optimize for the common case, and the API is designed to prevent ordering issues while still being a drop-in one-liner.","title":"Philosophy"},{"location":"#motivations","text":"Lifecycle management with RxJava and Android is nothing new, so why yet another tool? Two common patterns for binding execution in RxJava that we used prior to this were as follows: CompositeSubscription field that all subscriptions had to be manually added to. RxLifecycle , which works via compose() to resolve the lifecycle end event and ultimately transform the given observable to takeUntil() that event is emitted. Both implementations are elegant and work well, but came with caveats that we sought to revisit and solve in AutoDispose. CompositeSubscription requires manual capture of the return value of subscribe calls, and gets tedious to reason about with regards to binding subscription until different events. RxLifecycle solves the caveats of CompositeSubscription use by working in a dead-simple API and handling resolution of corresponding events. It works great for Observable types, but due to the nature of how takeUntil() works, we found that Single and Completable usage was risky to use (particularly in a large team with varying levels of RxJava experience) considering lifecycle interruption would result in a downstream CancellationException every time. It s the contract of those types, but induced a lot of ceremony for what would otherwise likely be our most commonly used type ( Single ). Even with Observable , we were still burned occasionally by the completion event still coming through to an unsuspecting engineer. Another caveat we often ran into (and later aggressively linted against) was that the compose() call had ordering implications, and needed to be as close to the subscribe() call as possible to properly wrap upstream. If binding to views, there were also threading requirements on the observable chain in order to work properly. At the end of the day, we wanted true disposal/unsubscription-based behavior, but with RxLifecycle-esque semantics around scope resolution. RxJava 2 s Observer interfaces provide the perfect mechanism for this via their onSubscribe() callbacks. The result is de-risked Single / Completable usage, no ordering concerns, no threading concerns (fingers crossed), and true disposal with no further events of any kind upon scope end. We re quite happy with it, and hope the community finds it useful as well. Special thanks go to Dan Lew (creator of RxLifecycle), who helped pioneer this area for RxJava in android and humored many of the discussions around lifecycle handling over the past couple years that we ve learned from. Much of the internal scope resolution mechanics of AutoDispose are inspired by RxLifecycle.","title":"Motivations"},{"location":"#rxjava-1","text":"This pattern is sort of possible in RxJava 1, but only on Subscriber (via onStart() ) and CompletableObserver (which matches RxJava 2 s API). We are aggressively migrating our internal code to RxJava 2, and do not plan to try to backport this to RxJava 1.","title":"RxJava 1"},{"location":"#static-analysis","text":"","title":"Static analysis"},{"location":"#error-prone","text":"There is an optional error-prone checker you can use to enforce use of AutoDispose. Integration steps and more details can be found on the wiki","title":"Error Prone"},{"location":"#lint-check","text":"AutoDispose ships with a lint check that detects missing AutoDispose scope within defined scoped elements. Integration steps and more details can be found on the wiki","title":"Lint Check"},{"location":"#download","text":"Java: implementation com.uber.autodispose:autodispose:x.y.z LifecycleScopeProvider: implementation com.uber.autodispose:autodispose-lifecycle:x.y.z Android extensions: implementation com.uber.autodispose:autodispose-android:x.y.z Android Architecture Components extensions: implementation com.uber.autodispose:autodispose-android-archcomponents:x.y.z Android Architecture Components Test extensions: implementation com.uber.autodispose:autodispose-android-archcomponents-test:x.y.z RxLifecycle interop: autodispose-rxlifecycle implementation com.uber.autodispose:autodispose-rxlifecycle:x.y.z autodispose-rxlifecycle3 implementation com.uber.autodispose:autodispose-rxlifecycle3:x.y.z Javadocs and KDocs for the most recent release can be found here: https://uber.github.io/AutoDispose/1.x/ Snapshots of the development version are available in Sonatype s snapshots repository .","title":"Download"},{"location":"#license","text":"Copyright (C) 2017 Uber Technologies Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog Version 1.3.0 2019-05-15 Unified Kotlin extensions Starting with 1.3.0, all the -ktx artifacts and their kotlin extensions have been merged into the main artifacts they extended. This means that extensions in an artifact like autodispose-android-ktx are now available directly in the corresponding autodispose-android . This is a binary-compatible change because the extensions file name has changed while the extensions themselves have remained in the same package. So in essence, import com.uber.autodispose.autoDisposable still works as-is. Just remove the ktx artifact dependencies and everything will still link as-is! The Kotlin standard library has been added as an compileOnly dependency of artifacts containing Kotlin bindings. This is to avoid imposing the dependency for non-Kotlin users, but the expectation is for Kotlin users to bring their own standard library dependency to fulfill this if used. Considering the standard library is an ubiquitous dependency for Kotlin projects, we don t expect this to be an issue and drew inspiration for this design from Retrofit . Proguard/R8 .pro files in the unified artifacts have been updated to not warn on these KotlinExtensions files as they can be safely stripped in builds if unused. NOTE: One important thing this revealed was that the ktx artifacts were built with jdk target 1.6, while depending on Java artifacts that were built against JDK 8. Now that they are unified, this means that the Kotlin extensions require targeting JDK 1.8 as well (configurable via compiler arg -jvm-target=1.8 ). PRs: #339 #341 #346 More Kotlin extensions! Initially, we only provided minimal Kotlin extensions to support scopes on extra types like Android s LifecycleOwner , View , etc. This resulted in a bit of ceremony for these APIs to be used though, such as: Observable . just ( 1 ) . autoDisposable ( AndroidLifecycleScopeProvider . from ( this )) . subscribe () To simplify this, we ve added the following top-level extension functions for the following: * autodispose-android - View * autodispose-archcomponents - LifecycleOwner * autodispose-rxlifecycle - LifecycleProvider * autodispose-rxlifecycle3 - LifecycleProvider So now, the above snippet could just be: Observable . just ( 1 ) . autoDisposable ( this ) . subscribe () PRs: #348 #353 Removed deprecated lifecycle artifacts Following their deprecating in 1.1.0, the autodispose-lifecycle-jdk8 and autodispose-lifecycle-ktx artifacts are no longer published. Please move to just using LifecycleScopeProvider directly. Misc Dependency updates Kotlin: 1.3.31 AndroidX Annotations: 1.0.2 RxJava: 2.2.8 RxAndroid: 2.1.1 Artifact changes Original Merged into (if applicable) autodispose-ktx autodispose autodispose-android-ktx autodispose-android autodispose-android-archcomponents-ktx autodispose-android-archcomponents autodispose-android-archcomponents-test-ktx autodispose-android-archcomponents-test autodispose-lifecycle-ktx N/A autodispose-lifecycle-jdk8 N/A Note: This does not mean the existing versions were deleted or removed in any way, just that we will not publish 1.3.0 or later versions of them. Version 1.2.0 2019-04-03 Fixes a bug which allows Lint to refer to the app level gradle.properties file for configuration support. #335 New autodispose-rxlifeycle3 artifact for interop with RxLifecycle3. #319 Various dependency updates Lint: 26.3.2 Kotlin 1.3.21 All PRs: #319 , #320 , #322 , #326 , #327 #328 , #329 , #330 , #334 , #335 , #336 Version 1.1.0 2018-12-13 Static Analysis This is a big static analysis release. AutoDispose now ships with two static analysis artifacts: autodispose-lint for Android Lint and autodispose-error-prone for Error-Prone. Both of these checks operate by detecting uses of standard RxJava subscribe / subscribeWith calls in the context of something that has scope (such as a ScopeProvider ). If they\u2019re detected, the lint/checker will mark them as missing Disposable handling and suggest either using AutoDispose or (if lenient mode enabled) manually handle the returned Disposable . Both checks have configuration support: TypesWithScope - a comma-separated list of custom types with scope. By default, this is additive to default scopes. OverrideScopes - a boolean flag indicating if TypesWithScope should override the built-in scopes. false by default. Lenient - a boolean flag to enable a lenient mode that tells the linter to ignore cases where the returned Disposable is captured (aka \u201cI know what I\u2019m doing\u201d mode). false by default. Both checkers should have feature parity. They have different advantages: the Error-Prone check runs at compile-time, and lint will show up in the IDE and run on Kotlin code. You should use whichever one fits your stack best. Full integration instructions can be found on their respective wikis: https://github.com/uber/AutoDispose/wiki/Lint-Check https://github.com/uber/AutoDispose/wiki/Error-Prone Prior to this release, the Error Prone checker was missing a required service file to run, so the new artifact is different than the previous one (but not conflicting since the old one never worked!). This was a major project and contribution from a new maintainer to the project! @shaishavgandhi05 All PRs: #316 , #315 , #313 , #312 , #310 , #307 , #308 , #306 , #299 , #303 , #301 , #300 , #282 , #291 , #292 DefaultLifecycleScopeProvider and KotlinLifecycleScopeProvider Deprecation ( #275 ) DefaultLifecycleScopeProvider and KotlinLifecycleScopeProvider are now deprecated, and their default requestScope() behavior now elevated into the based LifecycleScopeProvider class. This is implemented as a Java 8 default interface method. Misc Non-android -ktx artifacts now use implementation / api dependencies ( #277 ) automatic-module-name is added to relevant JDK modules ( #281 ) Updated doc on RxLifecycleInterop ( #280 ) Kotlin is updated to 1.3.11 #274 , #309 Thanks to the following external contributors for this release: @MarkyC Version 1.0.0 2018-10-10 Stable release! This is identical in functionality to 1.0.0-RC3 but completely migrated to the new AndroidX artifacts. From this point forward for Android projects, you must be on AndroidX artifacts. You can use 1.0.0-RC3 to ease migration if need be. Version 1.0.0-RC3 2018-10-10 The project now targets Java 8 bytecode, with the expectation that projects are either on Java 8 or (if on Android) use D8 via Android Gradle Plugin 3.2.0. ( #257 ) More sample recipes for Android ViewModels and Fragments ( #254 ) ( #260 ) Various dependency updates Support library 28.0.0 Architecture Components (runtime) 1.1.1 Kotlin 1.2.71 RxJava 2.2.2 RxAndroid 2.1.0 Thanks to the following contributors for this release: @shaishavgandhi05 Version 1.0.0-RC2 2018-8-14 Small followup update to RC1 subscribe(Observer) methods in SubscribeProxy interfaces now accept wildcards for the observer type, matching their RxJava counterparts ( #244 ) Example: subscribe(Observer T observer) - subscribe(Observer ? super T observer) Kotlin artifacts now include Module.md files in dokka documentation ( #238 ) Android lifecycle Kotlin scope() extensions now return ScopeProvider instead of LifecycleScopeProvider ( #239 ) Thanks to the following contributors for this release: @shaishavgandhi05 Version 1.0.0-RC1 2018-8-2 This is the first release candidate of AutoDispose 1.0! Completable replaces Maybe as the source of truth for scoping ( #234 ) Note: we say Completable for semantic convenience, but in code it s almost always referred to via CompletableSource for flexibility This is a significant API change, but a good one we want to clean up before releasing 1.0. Since its inception, AutoDispose has always coerced scopes into a Maybe representation. Now, scopes are coerced to a CompletableSource . Maybe seemed like the right idea for something that may or may not emit , but in our case we actually don t care about the difference between onSuccess or onComplete. We did have a notion of UNBOUND , but that doesn t offer anything other than a severed lifecycle scope disposal in an atomic reference (no other cleanups would happen for gc, etc). This brings us to a Single . The thing is though, we don t care about the object/element type. A Single where the type doesn t matter is semantically a Completable , and thus this change. Note that semantics are slightly different for anyone that sourced scope via emissions from an Observable , Maybe , Completable , or Flowable , where before a completion event would not trigger disposal. Now it would. In the lifecycle artifact, completion of the lifecycle or emission of the target event (via takeUntil() ) will signal disposal. If there s a strong desire for it, we could look at adding top-level autoDisposable overrides that accept other RxJava types (and coerce them to Completable ). Lifecycle components are now a separate artifact ( #228 ) LifecycleScopeProvider is now in a separate artifact under autodispose-lifecycle , and now just extends ScopeProvider . This is sort of something we always wanted to do, as the recommended solution for AutoDispose is namely to use ScopeProvider and standard RxJava types. LifecycleScopeProvider supports corresponding-events-type lifecycles for use with lifecycle components like Android, but we mostly see this as a mechanism for boundary checks. Dan Lew excellently discusses this subject in his Why Not RxLifecycle? blog post. This does come with the caveat that one must implement requestScope() in implementations now. To smoothen this usage, a autodispose-lifecycle-jdk8 artifact exists with a DefaultLifecycleScopeProvider that has a default implementation of this on Java 8+ that matches the existing behavior. A similar default behavior was added for the autodispose-lifecycle-ktx artifact. These behaviors can be further tuned via factory helpers in LifecycleScopes . Other notable changes in this: * OutsideLifecycleException has been renamed to OutsideScopeException and kept in the core artifact. Boundary checks can be done and respected in ScopeProvider implementations, and corresponding AutoDisposePlugins for this have been renamed accordingly. * correspondingEvents() now returns a CorrespondingEventsFunction , which is a narrower subtype of Function that only needs one generic and only allows for throwing `OutsideScopeException. Misc All deprecated APIs have been removed. Kotlin Artifacts have been renamed to be {name}-ktx instead of {name}-kotlin to match other library conventions. Kotlin artifacts with .ktx or .kotlin package name entries have had them removed to match convention with other ktx-style artifacts. i.e. Instead of com.uber.autodispose.kotlin , it would just be com.uber.autodispose . ViewScopeProvider now uses a custom MainThreadDisposable that respects any main thread checks set via AutoDisposeAndroidPlugins . ( #232 ) Jetbrains annotations have been removed in favor of just using RxJava s @Nullable annotation directly. Saves some proguard rules and dependencies, and also makes annotation usage consistent. The following dependencies have been updated: RxJava 2.2.0 ( as() and ParallelFlowable are now stable APIs) Kotlin 1.2.60 Build against Android SDK 28 Support library 27.1.1 RxLifecycle 2.2.2 RxAndroid 2.0.2 The sample app has had some wonderful community contributions LeakCanary integration Architecture components sample , including ViewModel and using a repository pattern General structure cleanup This is an RC1. We won t release 1.0 final until the AndroidX artifacts are stable to save ourselves from having to release a 2.0 immediately after this. These are a lot of breaking changes, so please let us know if you see any issues. Thanks to the following contributors for this release: @shaishavgandhi05 and @remcomokveld Version 0.8.0 2018-5-7 Deprecated Scoper APIs now use the converter API under the hood ( #188 ) Up to this point, the new as() -based converter APIs just delegated to the existing deprecated to() APIs. In this release, they have been flipped, such that the to() APIs now just point to the as() -based APIs. This should be no visible user change, but please let us know if you see any issues. ViewScopeProvider now implements ScopeProvider instead of LifecycleScopeProvider ( #196 ) We believe this makes more sense, as there s no beginning boundary check for Views that we can check and the general attach state is quite simple. This also avoids leaking an unnecessary internal API. Defer to Comparable checks if LifecycleScopeProvider types implement it ( #196 ) For better flexibility, if a type for LifecycleScopeProvider implements Comparable , we will defer to it rather than equals() . This allows for consumers to better convey event ordering to the scope provider, and allow AutoDispose to catch events after a target event as a fallback. This covers cases where the targeted end event is missed but a later event comes through, allowing AutoDispose to dispose anyway. Note that this may result in a behavior change if your lifecycle types implemented Comparable before. Removed Error-Prone annotations ( #208 ) As of Error-Prone 2.3.1, @DoNotMock was removed. We ve switched to an internal copy of this annotation for documentation purposes and for any external checkers to still check this usage on their own (by name). Switch from JSR305 to Jetbrains annotations for nullability ( #208 ) To be compatible with the Java 9 module system, we ve switched away from the JSR 305 annotations/javax-extras on packages and now use the Jetbrains annotations for nullability instead. We still abide by a nonnull-by-default implementation, and only annotate nullable elements with @Nullable . This dependency, like JSR305/javax-extras, is compileOnly . Misc changes A few miscellaneous IDE warnings ( #208 ) We are now building against Android Gradle Plugin 3.1.x (latest stable) ( #190 ) Due to ongoing Dokka issues and update latency, we ve had to disable it on Kotlin artifacts for now. We plan to re-enable on the next release, which should add compatibility for AGP 3.x+. Call for input on next steps We have two major design proposals that we want community feedback on that would take shape in the next couple of releases. Please let us know if you have any thoughts! Kotlin rewrite: #198 Extract LifecycleScopeProvider to separate artifact, make it extend ScopeProvider: #197 Thanks to the following contributors for this release: @tbsandee , @atexannamedbob Version 0.7.0 2018-3-26 AutoDisposeAndroidPlugins ( #183 ) New API! AutoDisposeAndroidPlugins API for plugin hooks to AutoDispose s android behavior at runtime. The first plugin supported here is MainThreadChecker . This plugin allows for supplying a custom BooleanSupplier that can customize how main thread checks work. The conventional use case of this is Android JUnit tests, where the Looper class is not stubbed in the mock android.jar and fails explosively when touched. Another potential use of this at runtime to customize checks for more fine-grained main thread checks behavior. Example AutoDisposeAndroidPlugins . setOnCheckMainThread (() - { return true ; // Use whatever heuristics you prefer. }) This is available in the autodispose-android artifact, and all mainthread-checking APIs in android artifacts will delegate to this plugin hook. Misc Fixed a few nullability and other minor warnings ( #187 ) Contributed by @tbsandee ! Version 0.6.1 2018-2-23 This is patch release with a couple of QoL improvements: * Android artifacts consumer proguard rules have been updated to not warn on the compiled error-prone annotations, like @DoNotMock ( #178 ) * Contributed by @danh32 ! * Android artifacts no longer bundle a useless BuildConfig.java file ( #177 ) Version 0.6.0 2018-2-5 Error-Prone Checker artifact ( #156 ) There is a new Error-Prone checker artifact that you can optionally apply to have error-prone enforced checks that rx chains are autodisposed when executing in a class that has scope. This is experimental in the public, but has been used extensively internally at Uber for nearly a year. Please let us know if you run into any issues! Wiki page with setup and configuration instructions: https://github.com/uber/AutoDispose/wiki/Error-Prone-Checker We plan to add a UAST lint artifact in the future as well. ParallelFlowable support ( #155 ) AutoDispose now supports RxJava s ParallelFlowable type. Note that this only works through the new as() API, and there is no ParallelScoper API (since those are being removed in 1.0). ScopeProvider and LifecycleScopeProvider are now annotated with @DoNotMock ( #153 ) These types have specific test helpers that will be more robust for long term test usage, and thus should not be mocked. Convenience test() methods added to all SubscribeProxy interfaces ( #160 ) These are to match the convenience test() methods in regular RxJava types. Misc Archcomponents updated to 1.1.0 for compatibility with new artifacts ( #128 ) autodispose-android-archcomponents-test and autodispose-android-archcomponents-test-kotlin now only depend on the common arch components artifact rather than extensions , which removes the unused livedata and viewmodel transitive dependencies. RxViewHolder examples now implement LifecycleScopeProvider instead of ScopeProvider ( #157 ) Deprecated Kotlin APIs are now ERROR level instead of WARNING ( #151 ) Various doc fixes ( #158 ) RxLifecycle updated to 2.2.1 ( #161 ) ErrorProne annotations updated to 2.2.0 ( #161 ) Android artifacts now compiled against SDK 27 Android support annotations updated to 27.0.2 Thanks to the following contributors! @VisheshVadhera @bangarharshit @mmallozzi @0legg @shaunkawano Version 0.5.1 2017-12-6 Fix: A bug where unbound scopes would mark the observer as disposed, subsequently preventing future events from emitting. ( #149 ) Fix: Kotlin docs accidentally pointing to to() operators instead of as() . ( #145 ) Snapshots should be fully working now as well. Version 0.5.0 2017-12-3 New converter-based API for use with as() ( #141 ) AutoDispose s primary API is now via static autoDisposable() methods on the AutoDispose class. The previous to() based APIs are now completely deprecated, and will be removed in AutoDispose 1.0. This has been sort of the long-standing ideal API for AutoDispose for awhile, but wasn t possible until the introduction of the new as() operator in RxJava. As this operator is still not marked as stable (and won t until RxJava 2.2.0), AutoDispose will not be updated to 1.0 until then. The main difference is that you no longer have to specify the type indirection, and the returned converter is applicable for all 5 RxJava types. In use, it looks like this: Flowable . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Observable . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Maybe . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Single . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Completable . complete () . as ( autoDisposable ( scope )) . subscribe () There are three overloads for autoDisposable() , for each of the three scope types ( Maybe , ScopeProvider , and LifecycleScopeProvider ). The Kotlin bindings have also been updated to match semantics, with the autoDisposeWith extension functions being deprecated in favor of analogous autoDisposable . These are WARNING level in this release, and will become ERROR in AutoDispose 0.6.0, before finally being removed in 1.0. They also provide replaceWith options (compatible with Kotlin s deprecation quickfixes). autoDisposable reads best when statically imported (so you can do .as(autoDisposable(...)) , which you can safely do if you re using Java 8. For structural replace templates, see here ). Fixed a lot of concurrency edge cases and performance improvements after review from David Karnok ( #138 and #130 ) David Karnok (@akarnokd, RxJava project lead) did an audit of the current codebase and gave extensive feedback in #130. #138 implements that feedback. This handled a lot of concurrency gotchas and edge cases we were missing before. See the issue and PR for full details. Plugin for controlling whether or not to fill in stacktraces ( #124 ) AutoDisposePlugins has a new API to control whether or not lifecycle exception stacktraces are filled in. What this means is that if you opt out, the exceptions thrown in LifecycleScopeProvider boundary issues will no longer have a stacktrace ( getStacktrace() will return an empty array) and only carry the type name and message. This can be useful to gain some performance if you track stacktracing via other means. UNBOUND shorthand ( #125 ) ScopeProvider has a static instance of an unbound provider directly in the interface now for reuse. This obviates the need for TestScopeProvider#unbound() , which has been removed . Usage is simple: Observable . just ( 1 ) . as ( autoDisposable ( ScopeProvider . UNBOUND )) . subscribe () Misc Archcomponents updated to 1.0.0 final ( #128 ) RxJava dependency is now 2.1.7 (to leverage as() ) ( #141 ) Kotlin is now updated to 1.2.0 ( #141 ) Dokka is wired up, meaning that kotlin artifacts now also have exported javadocs. ( #126 ) subscribeBy example extension in the sample app displaying how you can add extension functions to the *SubscribeProxy classes. ( #127 ) delegateObserver() APIs on AutoDisposing observers have been promoted to stable. Considering they are useful for subscribeWith() , we can just keep it observer-based and keep the library more flexible long-term ( #144 ) Thanks to the following contributors! @charlesdurham @ajalt @tbsandee @akarnokd Version 0.4.0 2017-10-22 Structured Android Components #111 Android components have been split up into several artifacts under :android : - autodispose-android : Core android utilities, previously :autodispose-android - autodispose-android-archcomponents : Utilities for lifecycles in android archcomponents, previously :autodispose-android-archcomponents but does not have the test helper - New: autodispose-android-archcomponents-test : Test utilities for working with arch components, namely TestLifecycleOwner , formerly TestAndroidLifecycleScopeProvider . - This allows us to remove the extensions dependency from the main arch components artifact and keep this optional. This API can also be used for general use testing for arch components, as it s not actually specific to AutoDispose. - New: autodispose-android-kotlin : kotlin bindings for autodispose-android - New: autodispose-android-archcomponents-kotlin : kotlin bindings for autodispose-android-archcomponents - New: autodispose-android-archcomponents-test-kotlin : kotlin bindings for autodispose-android-test-archcomponents - New: Android artifacts include consumer proguard rules (relates to ( #112 )) Related changes: - Fix: Arch components updated to 1.0.0-rc1 , which should fix compatibility issues noted in ( #113 ) - Enhancement: untilEvent overload for AndroidLifecycleScopeProvider ( #107 ) - Now you can bind until a specific target event, or provide your own boundary provider function - Behavior change: previously, anything occurring after ON_STOP would resolve to ON_DESTROY . Now, they resolve to stop on the next destruction event. This brings it inline with the modern behavior of arch components version -rc1 . - Enhancement: AndroidLifecycleScopeProvider s are now reusable. This is somewhat experimental, as it works by dynamically resolving the last event based on the state. Please report any issues! #121 RxLifecycle Interop A new autodispose-rxlifecycle interop module was added, adding support for scoping to RxLifecycle s LifecycleProvider API. ( #118 ) Misc Reduced object allocations ( #108 ) Convenience unbound() factory on TestScopeProvider ( #108 ) Removed synthetic accessors ( #103 ) Updated to Kotlin 1.1.51 ( #116 ) Thanks to the following contributors! @rubengees @bangarharshit Updated dependencies: Android Arch Components: 1.0.0-rc1 Android Arch Components (common): 1.0.3 Kotlin: 1.1.51 New artifacts coordinates: compile com.uber.autodispose:autodispose-android-archcomponents-test:x.y.z compile com.uber.autodispose:autodispose-rxlifecycle:x.y.z compile com.uber.autodispose:autodispose-android-kotlin:x.y.z compile com.uber.autodispose:autodispose-android-archcomponents-kotlin:x.y.z compile com.uber.autodispose:autodispose-android-archcomponents-test-kotlin:x.y.z Version 0.3.0 2017-10-01 New: Static factory API ( #88 ) After a long time trying to figure out how to finagle this in a way that played nice with IDE autocomplete, the main API for AutoDispose is now via the AutoDispose class and its static factories. Observable ( 1 ) . to ( AutoDispose . with ( yourScope ). forObservable ()) . subscribe (); // Note: on Java 7, you must specify the generic. The IDE should autocomplete this for you. Observable ( 1 ) . to ( AutoDispose . with ( yourScope ). Integer forObservable ()) . subscribe (); with() has three overloads for Maybe , ScopeProvider , and LifecycleScopeProvider . They return an intermediary ScopeHandler , which in turn has 5 generic for___() methods that correspond to the 5 RxJava types ( Observable , Flowable , Single , Maybe , and Completable ). The old Scoper class are now deprecated , and will be removed in AutoDispose 1.0. Fortunately, this is easy to migrate via IntelliJ s structural replace. Information can be found here . New: Support for Android Architecture Components! ( #71 ) With the beta release of architecture components, they are now supported in the autodispose-android-archcomponents artifact. Observable ( 1 ) . to ( AutoDispose . with ( AndroidLifecycleScopeProvider . from ( this )). forObservable ()) . subscribe (); Where this could be anything that implements LifecycleOwner or extends Lifecycle . compile com.uber.autodispose:autodispose-android-archcomponents:x.y.z Thanks to @yigit , @jaychang0917 , and @lsvijay for their help and contributions on this! New: Delegate Observer retrieval ( #89 ) Every automatically disposing observer implements one of the corresponding AutoDisposing____Observer interfaces in the com.uber.autodispose.observers package. They are considered read-only public API, with the intention that you can look for them in the RxJava plugin system (such as an onSubscribe hook). This extends their functionality to expose a new experimental API called delegateObserver() . This allows you to access the underlying observer that this is automatically disposing. The reason for this is that there may be conditions where you want to handle functionality depending on information from that Observer. As of RxJava 2.1.4, one such case could be to read information from a LambdaConsumerIntrospection ( relevant PR ). In the future, this will likely be narrowed to return a @Nullable lambdaConsumerIntrospection() , but we re open to feedback if others think this should remain the high level Observer type. Thanks to @mswysocki for his contribution on this! New: JSR 305 Nullability Annotations ( #79 ) AutoDispose packages now leverage JSR 305 annotations to indicate nullability. By default, all methods and parameters are non-null by default. This uses the spin-off javax-extras artifact for method nullability support, and is only a compileOnly dependency (so it should show up) for tooling but is not packaged as a compile dependency. Further reading: https://medium.com/square-corner-blog/non-null-is-the-default-58ffc0bb9111 New: Sample android app! ( #97 ) For a long time, AutoDispose relied on tests and the README to be demonstrations of API use. It s become clear that this is not enough information though, so we ve added a full sample app (borrowing heavily from RxLifecycle/Conductor s) to better illustrate API usage and runtime behavior. We ll continue to iterate on this over time. Improved: EndConsumerHelper ( #77 ) AutoDispose uses the same disposal-helper utilities as RxJava. This updates to RxJava s new EndConsumerHelper , which should hopefully help produce more helpful error messages in disposal error conditions. Other Updated various dependencies: Android Arch Components: 1.0.0-beta1 Android Support Library: 26.1.0 (to match arch components) Kotlin: 1.1.50 As always, we welcome any and all discussions/feedback/PRs! We re marching toward a 1.0 release Real Soon Now, so now is the time. There are a few outstanding discussion issues in the issue tracker about 1.0 final design decisions. Version 0.2.0 2017-05-08 New: Kotlin artifact! (#47) This adds autoDisposeWith() extensions to RxJava types. myObservable . doWhatever () . autoDisposeWith ( this ) . subscribe () New: Plugin system! (#57) Modeled after RxJava s plugins, this allows you to customize the behavior of AutoDispose with lifecycle boundary checks. AutoDisposePlugins . setOutsideLifecycleHandler ( t - { // Swallow the exception, or rethrow it, or throw your own! }) A good use case of this is, say, just silently disposing/logging observers outside of lifecycle exceptions in production but crashing on debug. New: Test helpers! (#48 #49) Two helpers were added to simulate conditions in testing. - TestLifecycleScopeProvider - This has two corresponding lifecycle methods: start() and stop() - TestScopeProvider - Has just one method - emit() . For testing with just the Maybe ? scope, we recommend using RxJava s built-in MaybeSubject . Fix : Fixed a race condition where upstream wouldn t be disposed if the lifecycle emitted or error d synchronously (i.e. was already terminated). (#57) Fix : Add missing @CheckReturnValue annotations to subscribeWith methods. (#53) Other tidbits: - Removed @NonNull annotations. Everything is @NonNull by default, and only elements annotated with @Nullable are not. - Use of the new java-library plugin for gradle (#64). The RxJava dependencies are marked as api . - Error prone has been integrated. Currently the annotations are just marked as compileOnly , but if a need arises/community wants them - we can compile them in a future version. Version 0.1.0 2017-03-13 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-130","text":"2019-05-15","title":"Version 1.3.0"},{"location":"changelog/#unified-kotlin-extensions","text":"Starting with 1.3.0, all the -ktx artifacts and their kotlin extensions have been merged into the main artifacts they extended. This means that extensions in an artifact like autodispose-android-ktx are now available directly in the corresponding autodispose-android . This is a binary-compatible change because the extensions file name has changed while the extensions themselves have remained in the same package. So in essence, import com.uber.autodispose.autoDisposable still works as-is. Just remove the ktx artifact dependencies and everything will still link as-is! The Kotlin standard library has been added as an compileOnly dependency of artifacts containing Kotlin bindings. This is to avoid imposing the dependency for non-Kotlin users, but the expectation is for Kotlin users to bring their own standard library dependency to fulfill this if used. Considering the standard library is an ubiquitous dependency for Kotlin projects, we don t expect this to be an issue and drew inspiration for this design from Retrofit . Proguard/R8 .pro files in the unified artifacts have been updated to not warn on these KotlinExtensions files as they can be safely stripped in builds if unused. NOTE: One important thing this revealed was that the ktx artifacts were built with jdk target 1.6, while depending on Java artifacts that were built against JDK 8. Now that they are unified, this means that the Kotlin extensions require targeting JDK 1.8 as well (configurable via compiler arg -jvm-target=1.8 ). PRs: #339 #341 #346","title":"Unified Kotlin extensions"},{"location":"changelog/#more-kotlin-extensions","text":"Initially, we only provided minimal Kotlin extensions to support scopes on extra types like Android s LifecycleOwner , View , etc. This resulted in a bit of ceremony for these APIs to be used though, such as: Observable . just ( 1 ) . autoDisposable ( AndroidLifecycleScopeProvider . from ( this )) . subscribe () To simplify this, we ve added the following top-level extension functions for the following: * autodispose-android - View * autodispose-archcomponents - LifecycleOwner * autodispose-rxlifecycle - LifecycleProvider * autodispose-rxlifecycle3 - LifecycleProvider So now, the above snippet could just be: Observable . just ( 1 ) . autoDisposable ( this ) . subscribe () PRs: #348 #353","title":"More Kotlin extensions!"},{"location":"changelog/#removed-deprecated-lifecycle-artifacts","text":"Following their deprecating in 1.1.0, the autodispose-lifecycle-jdk8 and autodispose-lifecycle-ktx artifacts are no longer published. Please move to just using LifecycleScopeProvider directly.","title":"Removed deprecated lifecycle artifacts"},{"location":"changelog/#misc","text":"Dependency updates Kotlin: 1.3.31 AndroidX Annotations: 1.0.2 RxJava: 2.2.8 RxAndroid: 2.1.1 Artifact changes Original Merged into (if applicable) autodispose-ktx autodispose autodispose-android-ktx autodispose-android autodispose-android-archcomponents-ktx autodispose-android-archcomponents autodispose-android-archcomponents-test-ktx autodispose-android-archcomponents-test autodispose-lifecycle-ktx N/A autodispose-lifecycle-jdk8 N/A Note: This does not mean the existing versions were deleted or removed in any way, just that we will not publish 1.3.0 or later versions of them.","title":"Misc"},{"location":"changelog/#version-120","text":"2019-04-03 Fixes a bug which allows Lint to refer to the app level gradle.properties file for configuration support. #335 New autodispose-rxlifeycle3 artifact for interop with RxLifecycle3. #319 Various dependency updates Lint: 26.3.2 Kotlin 1.3.21 All PRs: #319 , #320 , #322 , #326 , #327 #328 , #329 , #330 , #334 , #335 , #336","title":"Version 1.2.0"},{"location":"changelog/#version-110","text":"2018-12-13","title":"Version 1.1.0"},{"location":"changelog/#static-analysis","text":"This is a big static analysis release. AutoDispose now ships with two static analysis artifacts: autodispose-lint for Android Lint and autodispose-error-prone for Error-Prone. Both of these checks operate by detecting uses of standard RxJava subscribe / subscribeWith calls in the context of something that has scope (such as a ScopeProvider ). If they\u2019re detected, the lint/checker will mark them as missing Disposable handling and suggest either using AutoDispose or (if lenient mode enabled) manually handle the returned Disposable . Both checks have configuration support: TypesWithScope - a comma-separated list of custom types with scope. By default, this is additive to default scopes. OverrideScopes - a boolean flag indicating if TypesWithScope should override the built-in scopes. false by default. Lenient - a boolean flag to enable a lenient mode that tells the linter to ignore cases where the returned Disposable is captured (aka \u201cI know what I\u2019m doing\u201d mode). false by default. Both checkers should have feature parity. They have different advantages: the Error-Prone check runs at compile-time, and lint will show up in the IDE and run on Kotlin code. You should use whichever one fits your stack best. Full integration instructions can be found on their respective wikis: https://github.com/uber/AutoDispose/wiki/Lint-Check https://github.com/uber/AutoDispose/wiki/Error-Prone Prior to this release, the Error Prone checker was missing a required service file to run, so the new artifact is different than the previous one (but not conflicting since the old one never worked!). This was a major project and contribution from a new maintainer to the project! @shaishavgandhi05 All PRs: #316 , #315 , #313 , #312 , #310 , #307 , #308 , #306 , #299 , #303 , #301 , #300 , #282 , #291 , #292","title":"Static Analysis"},{"location":"changelog/#defaultlifecyclescopeprovider-and-kotlinlifecyclescopeprovider-deprecation-275","text":"DefaultLifecycleScopeProvider and KotlinLifecycleScopeProvider are now deprecated, and their default requestScope() behavior now elevated into the based LifecycleScopeProvider class. This is implemented as a Java 8 default interface method.","title":"DefaultLifecycleScopeProvider and KotlinLifecycleScopeProvider Deprecation (#275)"},{"location":"changelog/#misc_1","text":"Non-android -ktx artifacts now use implementation / api dependencies ( #277 ) automatic-module-name is added to relevant JDK modules ( #281 ) Updated doc on RxLifecycleInterop ( #280 ) Kotlin is updated to 1.3.11 #274 , #309 Thanks to the following external contributors for this release: @MarkyC","title":"Misc"},{"location":"changelog/#version-100","text":"2018-10-10 Stable release! This is identical in functionality to 1.0.0-RC3 but completely migrated to the new AndroidX artifacts. From this point forward for Android projects, you must be on AndroidX artifacts. You can use 1.0.0-RC3 to ease migration if need be.","title":"Version 1.0.0"},{"location":"changelog/#version-100-rc3","text":"2018-10-10 The project now targets Java 8 bytecode, with the expectation that projects are either on Java 8 or (if on Android) use D8 via Android Gradle Plugin 3.2.0. ( #257 ) More sample recipes for Android ViewModels and Fragments ( #254 ) ( #260 ) Various dependency updates Support library 28.0.0 Architecture Components (runtime) 1.1.1 Kotlin 1.2.71 RxJava 2.2.2 RxAndroid 2.1.0 Thanks to the following contributors for this release: @shaishavgandhi05","title":"Version 1.0.0-RC3"},{"location":"changelog/#version-100-rc2","text":"2018-8-14 Small followup update to RC1 subscribe(Observer) methods in SubscribeProxy interfaces now accept wildcards for the observer type, matching their RxJava counterparts ( #244 ) Example: subscribe(Observer T observer) - subscribe(Observer ? super T observer) Kotlin artifacts now include Module.md files in dokka documentation ( #238 ) Android lifecycle Kotlin scope() extensions now return ScopeProvider instead of LifecycleScopeProvider ( #239 ) Thanks to the following contributors for this release: @shaishavgandhi05","title":"Version 1.0.0-RC2"},{"location":"changelog/#version-100-rc1","text":"2018-8-2 This is the first release candidate of AutoDispose 1.0!","title":"Version 1.0.0-RC1"},{"location":"changelog/#completable-replaces-maybe-as-the-source-of-truth-for-scoping-234","text":"Note: we say Completable for semantic convenience, but in code it s almost always referred to via CompletableSource for flexibility This is a significant API change, but a good one we want to clean up before releasing 1.0. Since its inception, AutoDispose has always coerced scopes into a Maybe representation. Now, scopes are coerced to a CompletableSource . Maybe seemed like the right idea for something that may or may not emit , but in our case we actually don t care about the difference between onSuccess or onComplete. We did have a notion of UNBOUND , but that doesn t offer anything other than a severed lifecycle scope disposal in an atomic reference (no other cleanups would happen for gc, etc). This brings us to a Single . The thing is though, we don t care about the object/element type. A Single where the type doesn t matter is semantically a Completable , and thus this change. Note that semantics are slightly different for anyone that sourced scope via emissions from an Observable , Maybe , Completable , or Flowable , where before a completion event would not trigger disposal. Now it would. In the lifecycle artifact, completion of the lifecycle or emission of the target event (via takeUntil() ) will signal disposal. If there s a strong desire for it, we could look at adding top-level autoDisposable overrides that accept other RxJava types (and coerce them to Completable ).","title":"Completable replaces Maybe as the source of truth for scoping (#234)"},{"location":"changelog/#lifecycle-components-are-now-a-separate-artifact-228","text":"LifecycleScopeProvider is now in a separate artifact under autodispose-lifecycle , and now just extends ScopeProvider . This is sort of something we always wanted to do, as the recommended solution for AutoDispose is namely to use ScopeProvider and standard RxJava types. LifecycleScopeProvider supports corresponding-events-type lifecycles for use with lifecycle components like Android, but we mostly see this as a mechanism for boundary checks. Dan Lew excellently discusses this subject in his Why Not RxLifecycle? blog post. This does come with the caveat that one must implement requestScope() in implementations now. To smoothen this usage, a autodispose-lifecycle-jdk8 artifact exists with a DefaultLifecycleScopeProvider that has a default implementation of this on Java 8+ that matches the existing behavior. A similar default behavior was added for the autodispose-lifecycle-ktx artifact. These behaviors can be further tuned via factory helpers in LifecycleScopes . Other notable changes in this: * OutsideLifecycleException has been renamed to OutsideScopeException and kept in the core artifact. Boundary checks can be done and respected in ScopeProvider implementations, and corresponding AutoDisposePlugins for this have been renamed accordingly. * correspondingEvents() now returns a CorrespondingEventsFunction , which is a narrower subtype of Function that only needs one generic and only allows for throwing `OutsideScopeException.","title":"Lifecycle components are now a separate artifact (#228)"},{"location":"changelog/#misc_2","text":"All deprecated APIs have been removed. Kotlin Artifacts have been renamed to be {name}-ktx instead of {name}-kotlin to match other library conventions. Kotlin artifacts with .ktx or .kotlin package name entries have had them removed to match convention with other ktx-style artifacts. i.e. Instead of com.uber.autodispose.kotlin , it would just be com.uber.autodispose . ViewScopeProvider now uses a custom MainThreadDisposable that respects any main thread checks set via AutoDisposeAndroidPlugins . ( #232 ) Jetbrains annotations have been removed in favor of just using RxJava s @Nullable annotation directly. Saves some proguard rules and dependencies, and also makes annotation usage consistent. The following dependencies have been updated: RxJava 2.2.0 ( as() and ParallelFlowable are now stable APIs) Kotlin 1.2.60 Build against Android SDK 28 Support library 27.1.1 RxLifecycle 2.2.2 RxAndroid 2.0.2 The sample app has had some wonderful community contributions LeakCanary integration Architecture components sample , including ViewModel and using a repository pattern General structure cleanup This is an RC1. We won t release 1.0 final until the AndroidX artifacts are stable to save ourselves from having to release a 2.0 immediately after this. These are a lot of breaking changes, so please let us know if you see any issues. Thanks to the following contributors for this release: @shaishavgandhi05 and @remcomokveld","title":"Misc"},{"location":"changelog/#version-080","text":"2018-5-7","title":"Version 0.8.0"},{"location":"changelog/#deprecated-scoper-apis-now-use-the-converter-api-under-the-hood-188","text":"Up to this point, the new as() -based converter APIs just delegated to the existing deprecated to() APIs. In this release, they have been flipped, such that the to() APIs now just point to the as() -based APIs. This should be no visible user change, but please let us know if you see any issues.","title":"Deprecated Scoper APIs now use the converter API under the hood (#188)"},{"location":"changelog/#viewscopeprovider-now-implements-scopeprovider-instead-of-lifecyclescopeprovider-196","text":"We believe this makes more sense, as there s no beginning boundary check for Views that we can check and the general attach state is quite simple. This also avoids leaking an unnecessary internal API.","title":"ViewScopeProvider now implements ScopeProvider instead of LifecycleScopeProvider (#196)"},{"location":"changelog/#defer-to-comparable-checks-if-lifecyclescopeprovider-types-implement-it-196","text":"For better flexibility, if a type for LifecycleScopeProvider implements Comparable , we will defer to it rather than equals() . This allows for consumers to better convey event ordering to the scope provider, and allow AutoDispose to catch events after a target event as a fallback. This covers cases where the targeted end event is missed but a later event comes through, allowing AutoDispose to dispose anyway. Note that this may result in a behavior change if your lifecycle types implemented Comparable before.","title":"Defer to Comparable checks if LifecycleScopeProvider types implement it (#196)"},{"location":"changelog/#removed-error-prone-annotations-208","text":"As of Error-Prone 2.3.1, @DoNotMock was removed. We ve switched to an internal copy of this annotation for documentation purposes and for any external checkers to still check this usage on their own (by name).","title":"Removed Error-Prone annotations (#208)"},{"location":"changelog/#switch-from-jsr305-to-jetbrains-annotations-for-nullability-208","text":"To be compatible with the Java 9 module system, we ve switched away from the JSR 305 annotations/javax-extras on packages and now use the Jetbrains annotations for nullability instead. We still abide by a nonnull-by-default implementation, and only annotate nullable elements with @Nullable . This dependency, like JSR305/javax-extras, is compileOnly .","title":"Switch from JSR305 to Jetbrains annotations for nullability (#208)"},{"location":"changelog/#misc-changes","text":"A few miscellaneous IDE warnings ( #208 ) We are now building against Android Gradle Plugin 3.1.x (latest stable) ( #190 ) Due to ongoing Dokka issues and update latency, we ve had to disable it on Kotlin artifacts for now. We plan to re-enable on the next release, which should add compatibility for AGP 3.x+.","title":"Misc changes"},{"location":"changelog/#call-for-input-on-next-steps","text":"We have two major design proposals that we want community feedback on that would take shape in the next couple of releases. Please let us know if you have any thoughts! Kotlin rewrite: #198 Extract LifecycleScopeProvider to separate artifact, make it extend ScopeProvider: #197 Thanks to the following contributors for this release: @tbsandee , @atexannamedbob","title":"Call for input on next steps"},{"location":"changelog/#version-070","text":"2018-3-26","title":"Version 0.7.0"},{"location":"changelog/#autodisposeandroidplugins-183","text":"New API! AutoDisposeAndroidPlugins API for plugin hooks to AutoDispose s android behavior at runtime. The first plugin supported here is MainThreadChecker . This plugin allows for supplying a custom BooleanSupplier that can customize how main thread checks work. The conventional use case of this is Android JUnit tests, where the Looper class is not stubbed in the mock android.jar and fails explosively when touched. Another potential use of this at runtime to customize checks for more fine-grained main thread checks behavior. Example AutoDisposeAndroidPlugins . setOnCheckMainThread (() - { return true ; // Use whatever heuristics you prefer. }) This is available in the autodispose-android artifact, and all mainthread-checking APIs in android artifacts will delegate to this plugin hook.","title":"AutoDisposeAndroidPlugins (#183)"},{"location":"changelog/#misc_3","text":"Fixed a few nullability and other minor warnings ( #187 ) Contributed by @tbsandee !","title":"Misc"},{"location":"changelog/#version-061","text":"2018-2-23 This is patch release with a couple of QoL improvements: * Android artifacts consumer proguard rules have been updated to not warn on the compiled error-prone annotations, like @DoNotMock ( #178 ) * Contributed by @danh32 ! * Android artifacts no longer bundle a useless BuildConfig.java file ( #177 )","title":"Version 0.6.1"},{"location":"changelog/#version-060","text":"2018-2-5","title":"Version 0.6.0"},{"location":"changelog/#error-prone-checker-artifact-156","text":"There is a new Error-Prone checker artifact that you can optionally apply to have error-prone enforced checks that rx chains are autodisposed when executing in a class that has scope. This is experimental in the public, but has been used extensively internally at Uber for nearly a year. Please let us know if you run into any issues! Wiki page with setup and configuration instructions: https://github.com/uber/AutoDispose/wiki/Error-Prone-Checker We plan to add a UAST lint artifact in the future as well.","title":"Error-Prone Checker artifact (#156)"},{"location":"changelog/#parallelflowable-support-155","text":"AutoDispose now supports RxJava s ParallelFlowable type. Note that this only works through the new as() API, and there is no ParallelScoper API (since those are being removed in 1.0).","title":"ParallelFlowable support (#155)"},{"location":"changelog/#scopeprovider-and-lifecyclescopeprovider-are-now-annotated-with-donotmock-153","text":"These types have specific test helpers that will be more robust for long term test usage, and thus should not be mocked.","title":"ScopeProvider and LifecycleScopeProvider are now annotated with @DoNotMock (#153)"},{"location":"changelog/#convenience-test-methods-added-to-all-subscribeproxy-interfaces-160","text":"These are to match the convenience test() methods in regular RxJava types.","title":"Convenience test() methods added to all SubscribeProxy interfaces (#160)"},{"location":"changelog/#misc_4","text":"Archcomponents updated to 1.1.0 for compatibility with new artifacts ( #128 ) autodispose-android-archcomponents-test and autodispose-android-archcomponents-test-kotlin now only depend on the common arch components artifact rather than extensions , which removes the unused livedata and viewmodel transitive dependencies. RxViewHolder examples now implement LifecycleScopeProvider instead of ScopeProvider ( #157 ) Deprecated Kotlin APIs are now ERROR level instead of WARNING ( #151 ) Various doc fixes ( #158 ) RxLifecycle updated to 2.2.1 ( #161 ) ErrorProne annotations updated to 2.2.0 ( #161 ) Android artifacts now compiled against SDK 27 Android support annotations updated to 27.0.2 Thanks to the following contributors! @VisheshVadhera @bangarharshit @mmallozzi @0legg @shaunkawano","title":"Misc"},{"location":"changelog/#version-051","text":"2017-12-6 Fix: A bug where unbound scopes would mark the observer as disposed, subsequently preventing future events from emitting. ( #149 ) Fix: Kotlin docs accidentally pointing to to() operators instead of as() . ( #145 ) Snapshots should be fully working now as well.","title":"Version 0.5.1"},{"location":"changelog/#version-050","text":"2017-12-3","title":"Version 0.5.0"},{"location":"changelog/#new-converter-based-api-for-use-with-as-141","text":"AutoDispose s primary API is now via static autoDisposable() methods on the AutoDispose class. The previous to() based APIs are now completely deprecated, and will be removed in AutoDispose 1.0. This has been sort of the long-standing ideal API for AutoDispose for awhile, but wasn t possible until the introduction of the new as() operator in RxJava. As this operator is still not marked as stable (and won t until RxJava 2.2.0), AutoDispose will not be updated to 1.0 until then. The main difference is that you no longer have to specify the type indirection, and the returned converter is applicable for all 5 RxJava types. In use, it looks like this: Flowable . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Observable . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Maybe . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Single . just ( 1 ) . as ( autoDisposable ( scope )) . subscribe () Completable . complete () . as ( autoDisposable ( scope )) . subscribe () There are three overloads for autoDisposable() , for each of the three scope types ( Maybe , ScopeProvider , and LifecycleScopeProvider ). The Kotlin bindings have also been updated to match semantics, with the autoDisposeWith extension functions being deprecated in favor of analogous autoDisposable . These are WARNING level in this release, and will become ERROR in AutoDispose 0.6.0, before finally being removed in 1.0. They also provide replaceWith options (compatible with Kotlin s deprecation quickfixes). autoDisposable reads best when statically imported (so you can do .as(autoDisposable(...)) , which you can safely do if you re using Java 8. For structural replace templates, see here ).","title":"New converter-based API for use with as() (#141)"},{"location":"changelog/#fixed-a-lot-of-concurrency-edge-cases-and-performance-improvements-after-review-from-david-karnok-138-and-130","text":"David Karnok (@akarnokd, RxJava project lead) did an audit of the current codebase and gave extensive feedback in #130. #138 implements that feedback. This handled a lot of concurrency gotchas and edge cases we were missing before. See the issue and PR for full details.","title":"Fixed a lot of concurrency edge cases and performance improvements after review from David Karnok (#138 and #130)"},{"location":"changelog/#plugin-for-controlling-whether-or-not-to-fill-in-stacktraces-124","text":"AutoDisposePlugins has a new API to control whether or not lifecycle exception stacktraces are filled in. What this means is that if you opt out, the exceptions thrown in LifecycleScopeProvider boundary issues will no longer have a stacktrace ( getStacktrace() will return an empty array) and only carry the type name and message. This can be useful to gain some performance if you track stacktracing via other means.","title":"Plugin for controlling whether or not to fill in stacktraces (#124)"},{"location":"changelog/#unbound-shorthand-125","text":"ScopeProvider has a static instance of an unbound provider directly in the interface now for reuse. This obviates the need for TestScopeProvider#unbound() , which has been removed . Usage is simple: Observable . just ( 1 ) . as ( autoDisposable ( ScopeProvider . UNBOUND )) . subscribe ()","title":"UNBOUND shorthand (#125)"},{"location":"changelog/#misc_5","text":"Archcomponents updated to 1.0.0 final ( #128 ) RxJava dependency is now 2.1.7 (to leverage as() ) ( #141 ) Kotlin is now updated to 1.2.0 ( #141 ) Dokka is wired up, meaning that kotlin artifacts now also have exported javadocs. ( #126 ) subscribeBy example extension in the sample app displaying how you can add extension functions to the *SubscribeProxy classes. ( #127 ) delegateObserver() APIs on AutoDisposing observers have been promoted to stable. Considering they are useful for subscribeWith() , we can just keep it observer-based and keep the library more flexible long-term ( #144 ) Thanks to the following contributors! @charlesdurham @ajalt @tbsandee @akarnokd","title":"Misc"},{"location":"changelog/#version-040","text":"2017-10-22","title":"Version 0.4.0"},{"location":"changelog/#structured-android-components-111","text":"Android components have been split up into several artifacts under :android : - autodispose-android : Core android utilities, previously :autodispose-android - autodispose-android-archcomponents : Utilities for lifecycles in android archcomponents, previously :autodispose-android-archcomponents but does not have the test helper - New: autodispose-android-archcomponents-test : Test utilities for working with arch components, namely TestLifecycleOwner , formerly TestAndroidLifecycleScopeProvider . - This allows us to remove the extensions dependency from the main arch components artifact and keep this optional. This API can also be used for general use testing for arch components, as it s not actually specific to AutoDispose. - New: autodispose-android-kotlin : kotlin bindings for autodispose-android - New: autodispose-android-archcomponents-kotlin : kotlin bindings for autodispose-android-archcomponents - New: autodispose-android-archcomponents-test-kotlin : kotlin bindings for autodispose-android-test-archcomponents - New: Android artifacts include consumer proguard rules (relates to ( #112 )) Related changes: - Fix: Arch components updated to 1.0.0-rc1 , which should fix compatibility issues noted in ( #113 ) - Enhancement: untilEvent overload for AndroidLifecycleScopeProvider ( #107 ) - Now you can bind until a specific target event, or provide your own boundary provider function - Behavior change: previously, anything occurring after ON_STOP would resolve to ON_DESTROY . Now, they resolve to stop on the next destruction event. This brings it inline with the modern behavior of arch components version -rc1 . - Enhancement: AndroidLifecycleScopeProvider s are now reusable. This is somewhat experimental, as it works by dynamically resolving the last event based on the state. Please report any issues! #121","title":"Structured Android Components #111"},{"location":"changelog/#rxlifecycle-interop","text":"A new autodispose-rxlifecycle interop module was added, adding support for scoping to RxLifecycle s LifecycleProvider API. ( #118 )","title":"RxLifecycle Interop"},{"location":"changelog/#misc_6","text":"Reduced object allocations ( #108 ) Convenience unbound() factory on TestScopeProvider ( #108 ) Removed synthetic accessors ( #103 ) Updated to Kotlin 1.1.51 ( #116 ) Thanks to the following contributors! @rubengees @bangarharshit","title":"Misc"},{"location":"changelog/#updated-dependencies","text":"Android Arch Components: 1.0.0-rc1 Android Arch Components (common): 1.0.3 Kotlin: 1.1.51","title":"Updated dependencies:"},{"location":"changelog/#new-artifacts-coordinates","text":"compile com.uber.autodispose:autodispose-android-archcomponents-test:x.y.z compile com.uber.autodispose:autodispose-rxlifecycle:x.y.z compile com.uber.autodispose:autodispose-android-kotlin:x.y.z compile com.uber.autodispose:autodispose-android-archcomponents-kotlin:x.y.z compile com.uber.autodispose:autodispose-android-archcomponents-test-kotlin:x.y.z","title":"New artifacts coordinates:"},{"location":"changelog/#version-030","text":"2017-10-01 New: Static factory API ( #88 ) After a long time trying to figure out how to finagle this in a way that played nice with IDE autocomplete, the main API for AutoDispose is now via the AutoDispose class and its static factories. Observable ( 1 ) . to ( AutoDispose . with ( yourScope ). forObservable ()) . subscribe (); // Note: on Java 7, you must specify the generic. The IDE should autocomplete this for you. Observable ( 1 ) . to ( AutoDispose . with ( yourScope ). Integer forObservable ()) . subscribe (); with() has three overloads for Maybe , ScopeProvider , and LifecycleScopeProvider . They return an intermediary ScopeHandler , which in turn has 5 generic for___() methods that correspond to the 5 RxJava types ( Observable , Flowable , Single , Maybe , and Completable ). The old Scoper class are now deprecated , and will be removed in AutoDispose 1.0. Fortunately, this is easy to migrate via IntelliJ s structural replace. Information can be found here . New: Support for Android Architecture Components! ( #71 ) With the beta release of architecture components, they are now supported in the autodispose-android-archcomponents artifact. Observable ( 1 ) . to ( AutoDispose . with ( AndroidLifecycleScopeProvider . from ( this )). forObservable ()) . subscribe (); Where this could be anything that implements LifecycleOwner or extends Lifecycle . compile com.uber.autodispose:autodispose-android-archcomponents:x.y.z Thanks to @yigit , @jaychang0917 , and @lsvijay for their help and contributions on this! New: Delegate Observer retrieval ( #89 ) Every automatically disposing observer implements one of the corresponding AutoDisposing____Observer interfaces in the com.uber.autodispose.observers package. They are considered read-only public API, with the intention that you can look for them in the RxJava plugin system (such as an onSubscribe hook). This extends their functionality to expose a new experimental API called delegateObserver() . This allows you to access the underlying observer that this is automatically disposing. The reason for this is that there may be conditions where you want to handle functionality depending on information from that Observer. As of RxJava 2.1.4, one such case could be to read information from a LambdaConsumerIntrospection ( relevant PR ). In the future, this will likely be narrowed to return a @Nullable lambdaConsumerIntrospection() , but we re open to feedback if others think this should remain the high level Observer type. Thanks to @mswysocki for his contribution on this! New: JSR 305 Nullability Annotations ( #79 ) AutoDispose packages now leverage JSR 305 annotations to indicate nullability. By default, all methods and parameters are non-null by default. This uses the spin-off javax-extras artifact for method nullability support, and is only a compileOnly dependency (so it should show up) for tooling but is not packaged as a compile dependency. Further reading: https://medium.com/square-corner-blog/non-null-is-the-default-58ffc0bb9111 New: Sample android app! ( #97 ) For a long time, AutoDispose relied on tests and the README to be demonstrations of API use. It s become clear that this is not enough information though, so we ve added a full sample app (borrowing heavily from RxLifecycle/Conductor s) to better illustrate API usage and runtime behavior. We ll continue to iterate on this over time. Improved: EndConsumerHelper ( #77 ) AutoDispose uses the same disposal-helper utilities as RxJava. This updates to RxJava s new EndConsumerHelper , which should hopefully help produce more helpful error messages in disposal error conditions. Other Updated various dependencies: Android Arch Components: 1.0.0-beta1 Android Support Library: 26.1.0 (to match arch components) Kotlin: 1.1.50 As always, we welcome any and all discussions/feedback/PRs! We re marching toward a 1.0 release Real Soon Now, so now is the time. There are a few outstanding discussion issues in the issue tracker about 1.0 final design decisions.","title":"Version 0.3.0"},{"location":"changelog/#version-020","text":"2017-05-08 New: Kotlin artifact! (#47) This adds autoDisposeWith() extensions to RxJava types. myObservable . doWhatever () . autoDisposeWith ( this ) . subscribe () New: Plugin system! (#57) Modeled after RxJava s plugins, this allows you to customize the behavior of AutoDispose with lifecycle boundary checks. AutoDisposePlugins . setOutsideLifecycleHandler ( t - { // Swallow the exception, or rethrow it, or throw your own! }) A good use case of this is, say, just silently disposing/logging observers outside of lifecycle exceptions in production but crashing on debug. New: Test helpers! (#48 #49) Two helpers were added to simulate conditions in testing. - TestLifecycleScopeProvider - This has two corresponding lifecycle methods: start() and stop() - TestScopeProvider - Has just one method - emit() . For testing with just the Maybe ? scope, we recommend using RxJava s built-in MaybeSubject . Fix : Fixed a race condition where upstream wouldn t be disposed if the lifecycle emitted or error d synchronously (i.e. was already terminated). (#57) Fix : Add missing @CheckReturnValue annotations to subscribeWith methods. (#53) Other tidbits: - Removed @NonNull annotations. Everything is @NonNull by default, and only elements annotated with @Nullable are not. - Use of the new java-library plugin for gradle (#64). The RxJava dependencies are marked as api . - Error prone has been integrated. Currently the annotations are just marked as compileOnly , but if a need arises/community wants them - we can compile them in a future version.","title":"Version 0.2.0"},{"location":"changelog/#version-010","text":"2017-03-13 Initial release","title":"Version 0.1.0"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project s leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/","title":"Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at . The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project s leadership.","title":"Enforcement"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/","title":"Attribution"},{"location":"contributing/","text":"Contributing to AutoDispose The Uber team welcomes contributions of all kinds, from simple bug reports through documentation, test cases, bugfixes, and features. Workflow We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bugfixes, etc are always welcome. Code style This project uses ktlint and GJF , provided via the spotless gradle plugin. If you find that one of your pull reviews does not pass the CI server check due to a code style conflict, you can easily fix it by running: ./gradlew spotlessApply. Generally speaking - we use vanilla ktlint + 2space indents, and vanilla GJF. You can integrate both of these in IntelliJ code style via either GJF s official plugin or applying code style from Jetbrains official style. No star imports please! DOs and DON Ts DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it s often better to create new issue than to side track the discussion. DO run all Gradle verification tasks ( ./gradlew check ) before submitting a pull request DON T submit PRs that alter licensing related files or headers. If you believe there s a problem with them, file an issue and we ll be happy to discuss it.","title":"Contributing"},{"location":"contributing/#contributing-to-autodispose","text":"The Uber team welcomes contributions of all kinds, from simple bug reports through documentation, test cases, bugfixes, and features.","title":"Contributing to AutoDispose"},{"location":"contributing/#workflow","text":"We love GitHub issues! For small feature requests, an issue first proposing it for discussion or demo implementation in a PR suffice. For big features, please open an issue so that we can agree on the direction, and hopefully avoid investing a lot of time on a feature that might need reworking. Small pull requests for things like typos, bugfixes, etc are always welcome.","title":"Workflow"},{"location":"contributing/#code-style","text":"This project uses ktlint and GJF , provided via the spotless gradle plugin. If you find that one of your pull reviews does not pass the CI server check due to a code style conflict, you can easily fix it by running: ./gradlew spotlessApply. Generally speaking - we use vanilla ktlint + 2space indents, and vanilla GJF. You can integrate both of these in IntelliJ code style via either GJF s official plugin or applying code style from Jetbrains official style. No star imports please!","title":"Code style"},{"location":"contributing/#dos-and-donts","text":"DO follow our coding style DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. DO keep the discussions focused. When a new or related topic comes up it s often better to create new issue than to side track the discussion. DO run all Gradle verification tasks ( ./gradlew check ) before submitting a pull request DON T submit PRs that alter licensing related files or headers. If you believe there s a problem with them, file an issue and we ll be happy to discuss it.","title":"DOs and DON'Ts"},{"location":"error-prone/","text":"AutoDispose is an Error-Prone check to detect missing AutoDispose scope within defined scoped elements. Installation Below are sample configurations which pull in both the AutoDispose Error-Prone checker. Gradle Java plugins { id java-library // Or whatever other java plugin you re using id net.ltgt.errorprone version 0.6 } dependencies { errorprone com.uber.autodispose:autodispose-error-prone:x.y.z // where x.y.z is the latest version. errorprone com.google.errorprone:error_prone_core:2.3.2 // Or whatever the latest version is } tasks.withType(JavaCompile).configureEach { // Only if you want to support custom types with scopes // Below is a sample configuration which includes Conductor def classesWithScope = [ com.bluelinelabs.conductor.Controller ] options.errorprone { check( AutoDispose , CheckSeverity.ERROR) option( AutoDispose:TypesWithScope , classesWithScope.join( , )) option( UAutoDispose:Lenient , true ) } } Android plugins { id net.ltgt.errorprone version 0.0.13 } dependencies { errorprone com.uber.autodispose:autodispose-error-prone-checker:x.y.z // where x.y.z is the latest version. errorprone com.google.errorprone:error_prone_core:2.3.2 // Or whatever the latest version is } // Must go in afterEvaluate afterEvaluate { tasks.withType(JavaCompile).configureEach { // Only if you want to support custom types with scopes // Below is a sample configuration which includes Conductor def classesWithScope = [ com.bluelinelabs.conductor.Controller ] options.errorprone { check( AutoDispose , CheckSeverity.ERROR) option( AutoDispose:TypesWithScope , classesWithScope.join( , )) option( AutoDispose:Lenient , true ) } } } Maven build plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.5 /version configuration compilerId javac-with-errorprone /compilerId forceJavacCompilerUse true /forceJavacCompilerUse source 1.8 /source target 1.8 /target showWarnings true /showWarnings annotationProcessorPaths path groupId com.uber.autodispose /groupId artifactId autodispose-error-prone /artifactId version x.y.z /version /path /annotationProcessorPaths compilerArgs !-- Only if you want to support custom configuration Below is a sample configuration which includes Conductor -- arg --XepOpt:AutoDispose:TypesWithScope=com.bluelinelabs.conductor.Controller /arg arg --XepOpt:AutoDispose:Lenient=true /arg /compilerArgs /configuration dependencies dependency groupId org.codehaus.plexus /groupId artifactId plexus-compiler-javac-errorprone /artifactId version 2.8 /version /dependency !-- override plexus-compiler-javac-errorprone s dependency on Error Prone with the latest version -- dependency groupId com.google.errorprone /groupId artifactId error_prone_core /artifactId version 2.3.2 /version /dependency /dependencies /plugin /build Report example The following code snippet: public class ComponentWithLifecycle extends Activity { public void observeOnSomething () { Observable . interval ( 1 , TimeUnit . SECONDS ) . subscribe ( new Consumer Long () { @Override public void accept ( Long interval ) throws Exception { System . out . println ( interval ); } }); } } would produce the following error: ./gradlew build error: [AutoDispose] Missing Disposable handling: Apply AutoDispose or cache the Disposable instance manually and enable lenient mode. .subscribe(new Consumer Long () { ^ (see https://github.com/uber/AutoDispose/wiki/Error-Prone-Checker) Would lead to this error at compile-time. Configuration Scopes By default the checker is applied to AutoDispose interfaces and standard Android components with lifecycles: 1. Activity 2. Fragment 3. Support Fragment 4. LifecycleScopeProvider 5. ScopeProvider 6. LifecycleOwner This can be configured by Error-Prone s command line flags . The following flag is supported and takes input in a form of comma separated list of fully qualified class names of classes with scopes: -XepOpt:AutoDispose:TypesWithScope=com.bluelinelabs.conductor.Controller,android.app.Activity This flag adds the provided custom scopes to the default scopes mentioned above. Overriding Scopes If you only want the error prone check to run on your custom scopes and not the default ones, you can simply override the default scopes by adding the OverrideScopes flag like so: -XepOpt:AutoDispose:OverrideScopes=true Lenient Lenient is a mode to ask the checker to be lenient when capturing returned Disposable types. What this means is that if an rx subscribe method is called and its returned Disposable is captured, AutoDispose this code is manually managing the subscription and show ignore it. The same applies for capturing the returned value of subscribeWith if the input type implements Disposable . This can be configured by Error-Prone s command line flags . The following flag is supported and takes input in a form of a boolean true or false : -XepOpt:AutoDispose:Lenient=true The default value of this is false . Examples // This is allowed in lenient mode Disposable d = Observable . just ( 1 ). subscribe (); // This is allowed in lenient mode, because the subscribeWith arg type is Disposable DisposableObserver Integer do = Observable . just ( 1 ). subscribeWith ( new DisposableObserver ...) // This is not allowed in lenient mode, because the subscribeWith arg type is not Disposable Observer Integer do = Observable . just ( 1 ). subscribeWith ( new Observer ...) // This is not allowed in lenient mode, because the return value is not captured Observable . just ( 1 ). subscribe (); // This is not allowed in lenient mode, because that subscribe() overload just returns void Observable . just ( 1 ). subscribe ( new Observer ...)","title":"Error Prone"},{"location":"error-prone/#installation","text":"Below are sample configurations which pull in both the AutoDispose Error-Prone checker.","title":"Installation"},{"location":"error-prone/#gradle","text":"","title":"Gradle"},{"location":"error-prone/#java","text":"plugins { id java-library // Or whatever other java plugin you re using id net.ltgt.errorprone version 0.6 } dependencies { errorprone com.uber.autodispose:autodispose-error-prone:x.y.z // where x.y.z is the latest version. errorprone com.google.errorprone:error_prone_core:2.3.2 // Or whatever the latest version is } tasks.withType(JavaCompile).configureEach { // Only if you want to support custom types with scopes // Below is a sample configuration which includes Conductor def classesWithScope = [ com.bluelinelabs.conductor.Controller ] options.errorprone { check( AutoDispose , CheckSeverity.ERROR) option( AutoDispose:TypesWithScope , classesWithScope.join( , )) option( UAutoDispose:Lenient , true ) } }","title":"Java"},{"location":"error-prone/#android","text":"plugins { id net.ltgt.errorprone version 0.0.13 } dependencies { errorprone com.uber.autodispose:autodispose-error-prone-checker:x.y.z // where x.y.z is the latest version. errorprone com.google.errorprone:error_prone_core:2.3.2 // Or whatever the latest version is } // Must go in afterEvaluate afterEvaluate { tasks.withType(JavaCompile).configureEach { // Only if you want to support custom types with scopes // Below is a sample configuration which includes Conductor def classesWithScope = [ com.bluelinelabs.conductor.Controller ] options.errorprone { check( AutoDispose , CheckSeverity.ERROR) option( AutoDispose:TypesWithScope , classesWithScope.join( , )) option( AutoDispose:Lenient , true ) } } }","title":"Android"},{"location":"error-prone/#maven","text":"build plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.5 /version configuration compilerId javac-with-errorprone /compilerId forceJavacCompilerUse true /forceJavacCompilerUse source 1.8 /source target 1.8 /target showWarnings true /showWarnings annotationProcessorPaths path groupId com.uber.autodispose /groupId artifactId autodispose-error-prone /artifactId version x.y.z /version /path /annotationProcessorPaths compilerArgs !-- Only if you want to support custom configuration Below is a sample configuration which includes Conductor -- arg --XepOpt:AutoDispose:TypesWithScope=com.bluelinelabs.conductor.Controller /arg arg --XepOpt:AutoDispose:Lenient=true /arg /compilerArgs /configuration dependencies dependency groupId org.codehaus.plexus /groupId artifactId plexus-compiler-javac-errorprone /artifactId version 2.8 /version /dependency !-- override plexus-compiler-javac-errorprone s dependency on Error Prone with the latest version -- dependency groupId com.google.errorprone /groupId artifactId error_prone_core /artifactId version 2.3.2 /version /dependency /dependencies /plugin /build","title":"Maven"},{"location":"error-prone/#report-example","text":"The following code snippet: public class ComponentWithLifecycle extends Activity { public void observeOnSomething () { Observable . interval ( 1 , TimeUnit . SECONDS ) . subscribe ( new Consumer Long () { @Override public void accept ( Long interval ) throws Exception { System . out . println ( interval ); } }); } } would produce the following error: ./gradlew build error: [AutoDispose] Missing Disposable handling: Apply AutoDispose or cache the Disposable instance manually and enable lenient mode. .subscribe(new Consumer Long () { ^ (see https://github.com/uber/AutoDispose/wiki/Error-Prone-Checker) Would lead to this error at compile-time.","title":"Report example"},{"location":"error-prone/#configuration","text":"","title":"Configuration"},{"location":"error-prone/#scopes","text":"By default the checker is applied to AutoDispose interfaces and standard Android components with lifecycles: 1. Activity 2. Fragment 3. Support Fragment 4. LifecycleScopeProvider 5. ScopeProvider 6. LifecycleOwner This can be configured by Error-Prone s command line flags . The following flag is supported and takes input in a form of comma separated list of fully qualified class names of classes with scopes: -XepOpt:AutoDispose:TypesWithScope=com.bluelinelabs.conductor.Controller,android.app.Activity This flag adds the provided custom scopes to the default scopes mentioned above.","title":"Scopes"},{"location":"error-prone/#overriding-scopes","text":"If you only want the error prone check to run on your custom scopes and not the default ones, you can simply override the default scopes by adding the OverrideScopes flag like so: -XepOpt:AutoDispose:OverrideScopes=true","title":"Overriding Scopes"},{"location":"error-prone/#lenient","text":"Lenient is a mode to ask the checker to be lenient when capturing returned Disposable types. What this means is that if an rx subscribe method is called and its returned Disposable is captured, AutoDispose this code is manually managing the subscription and show ignore it. The same applies for capturing the returned value of subscribeWith if the input type implements Disposable . This can be configured by Error-Prone s command line flags . The following flag is supported and takes input in a form of a boolean true or false : -XepOpt:AutoDispose:Lenient=true The default value of this is false . Examples // This is allowed in lenient mode Disposable d = Observable . just ( 1 ). subscribe (); // This is allowed in lenient mode, because the subscribeWith arg type is Disposable DisposableObserver Integer do = Observable . just ( 1 ). subscribeWith ( new DisposableObserver ...) // This is not allowed in lenient mode, because the subscribeWith arg type is not Disposable Observer Integer do = Observable . just ( 1 ). subscribeWith ( new Observer ...) // This is not allowed in lenient mode, because the return value is not captured Observable . just ( 1 ). subscribe (); // This is not allowed in lenient mode, because that subscribe() overload just returns void Observable . just ( 1 ). subscribe ( new Observer ...)","title":"Lenient"},{"location":"lint-check/","text":"AutoDisposeDetector is a lint check to detect missing AutoDispose scope within defined scoped elements. Installation For Android Java/Kotlin projects, no configuration is required as the AutoDispose lint check is run by default with the existing lint checks. Report example The following code snippet: class ComponentWithLifecycle : Activity { fun observeOnSomething () { Observable . interval ( 1 , TimeUnit . SECONDS ) . subscribe { println ( it ) } } } will produce the following error at compile-time: ./gradlew build src/com/sample/app/ComponentWithLifecycle.kt:5: Error: Missing Disposable handling: Apply AutoDispose or cache the Disposable instance manually and enable lenient mode. [AutoDispose] .subscribe { println(it) } ~~~~~~~~~~~~~~~~~~~~~~~~~~ 1 errors, 0 warnings Configuration Scopes By default, the lint check is applied to AutoDispose interfaces and standard Android components with lifecycles: 1. Activity 2. Fragment 3. Support Fragment 4. ScopeProvider (which implicitly includes LifecycleScopeProvider ) 5. LifecycleOwner You can add your own custom scopes that you want the lint check applied to. In your app-level gradle.properties file, add the fully qualified name of your custom classes as comma-separated-values like so: autodispose . typesWithScope = com . bluelinelabs . conductor . Controller , com . sample . app . BasePresenter The types supplied are then added to the default types listed above. Overriding Scopes If you only want the lint check to run on your custom scopes and not the default ones, you can simply override the default scopes by adding this in your app-level gradle.properties file: autodispose . overrideScopes = true Lenient Lenient is a mode to ask the checker to be lenient when capturing returned Disposable types. What this means is that if an rx subscribe method is called and its returned Disposable is captured, AutoDispose this code is manually managing the subscription and show ignore it. The same applies for capturing the returned value of subscribeWith if the input type implements Disposable. This can be configured by adding the following flag to the app-level gradle.properties file. autodispose . lenient = true The default value of this is false . Examples // This is allowed in lenient mode Disposable d = Observable . just ( 1 ). subscribe (); // This is allowed in lenient mode, because the subscribeWith arg type is Disposable DisposableObserver Integer do = Observable . just ( 1 ). subscribeWith ( new DisposableObserver ...) // This is not allowed in lenient mode, because the subscribeWith arg type is not Disposable Observer Integer do = Observable . just ( 1 ). subscribeWith ( new Observer ...) // This is not allowed in lenient mode, because the return value is not captured Observable . just ( 1 ). subscribe (); // This is not allowed in lenient mode, because that subscribe() overload just returns void Observable . just ( 1 ). subscribe ( new Observer ...)","title":"Lint Check"},{"location":"lint-check/#installation","text":"For Android Java/Kotlin projects, no configuration is required as the AutoDispose lint check is run by default with the existing lint checks.","title":"Installation"},{"location":"lint-check/#report-example","text":"The following code snippet: class ComponentWithLifecycle : Activity { fun observeOnSomething () { Observable . interval ( 1 , TimeUnit . SECONDS ) . subscribe { println ( it ) } } } will produce the following error at compile-time: ./gradlew build src/com/sample/app/ComponentWithLifecycle.kt:5: Error: Missing Disposable handling: Apply AutoDispose or cache the Disposable instance manually and enable lenient mode. [AutoDispose] .subscribe { println(it) } ~~~~~~~~~~~~~~~~~~~~~~~~~~ 1 errors, 0 warnings","title":"Report example"},{"location":"lint-check/#configuration","text":"","title":"Configuration"},{"location":"lint-check/#scopes","text":"By default, the lint check is applied to AutoDispose interfaces and standard Android components with lifecycles: 1. Activity 2. Fragment 3. Support Fragment 4. ScopeProvider (which implicitly includes LifecycleScopeProvider ) 5. LifecycleOwner You can add your own custom scopes that you want the lint check applied to. In your app-level gradle.properties file, add the fully qualified name of your custom classes as comma-separated-values like so: autodispose . typesWithScope = com . bluelinelabs . conductor . Controller , com . sample . app . BasePresenter The types supplied are then added to the default types listed above.","title":"Scopes"},{"location":"lint-check/#overriding-scopes","text":"If you only want the lint check to run on your custom scopes and not the default ones, you can simply override the default scopes by adding this in your app-level gradle.properties file: autodispose . overrideScopes = true","title":"Overriding Scopes"},{"location":"lint-check/#lenient","text":"Lenient is a mode to ask the checker to be lenient when capturing returned Disposable types. What this means is that if an rx subscribe method is called and its returned Disposable is captured, AutoDispose this code is manually managing the subscription and show ignore it. The same applies for capturing the returned value of subscribeWith if the input type implements Disposable. This can be configured by adding the following flag to the app-level gradle.properties file. autodispose . lenient = true The default value of this is false .","title":"Lenient"},{"location":"lint-check/#examples","text":"// This is allowed in lenient mode Disposable d = Observable . just ( 1 ). subscribe (); // This is allowed in lenient mode, because the subscribeWith arg type is Disposable DisposableObserver Integer do = Observable . just ( 1 ). subscribeWith ( new DisposableObserver ...) // This is not allowed in lenient mode, because the subscribeWith arg type is not Disposable Observer Integer do = Observable . just ( 1 ). subscribeWith ( new Observer ...) // This is not allowed in lenient mode, because the return value is not captured Observable . just ( 1 ). subscribe (); // This is not allowed in lenient mode, because that subscribe() overload just returns void Observable . just ( 1 ). subscribe ( new Observer ...)","title":"Examples"},{"location":"migrating-020-030/","text":"0.3.0 switched the API to the new static factories in AutoDispose.java . To migrate, you can leverage IntelliJ s structural replace. Below is an exhaustive list. I suspect this could be whittled down to Completable replacement and java generic templates, but my script text fu isn t good enough (contributions welcome!). Notes for structural replace. If using Java 8, replace $Type$ with and remove $Type from the replacement template. Would be ideal to combine these into one smart replace but the tooling is a little rough to debug. Flowable Java 8 / Object streams Search template $Stream$.to(new com.uber.autodispose.FlowableScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forFlowable()) Java 7 regular types Search template $Stream$.to(new com.uber.autodispose.FlowableScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forFlowable()) Observable Java 8 / Object streams Search template $Stream$.to(new com.uber.autodispose.ObservableScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forObservable()) Java 7 regular types Search template $Stream$.to(new com.uber.autodispose.ObservableScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forObservable()) Maybe Java 8 / Object streams Search template $Stream$.to(new com.uber.autodispose.MaybeScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forMaybe()) Java 7 regular types Search template $Stream$.to(new com.uber.autodispose.MaybeScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forMaybe()) Single Java 8 / Object streams Search template $Stream$.to(new com.uber.autodispose.SingleScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forSingle()) Java 7 regular types Search template $Stream$.to(new com.uber.autodispose.SingleScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forSingle()) Completable Search template $Stream$.to(new com.uber.autodispose.CompletableScoper($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forCompletable())","title":"Migrating from 0.2.0 to 0.3.0"},{"location":"migrating-020-030/#flowable","text":"","title":"Flowable"},{"location":"migrating-020-030/#java-8-object-streams","text":"Search template $Stream$.to(new com.uber.autodispose.FlowableScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forFlowable())","title":"Java 8 / Object streams"},{"location":"migrating-020-030/#java-7-regular-types","text":"Search template $Stream$.to(new com.uber.autodispose.FlowableScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forFlowable())","title":"Java 7 regular types"},{"location":"migrating-020-030/#observable","text":"","title":"Observable"},{"location":"migrating-020-030/#java-8-object-streams_1","text":"Search template $Stream$.to(new com.uber.autodispose.ObservableScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forObservable())","title":"Java 8 / Object streams"},{"location":"migrating-020-030/#java-7-regular-types_1","text":"Search template $Stream$.to(new com.uber.autodispose.ObservableScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forObservable())","title":"Java 7 regular types"},{"location":"migrating-020-030/#maybe","text":"","title":"Maybe"},{"location":"migrating-020-030/#java-8-object-streams_2","text":"Search template $Stream$.to(new com.uber.autodispose.MaybeScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forMaybe())","title":"Java 8 / Object streams"},{"location":"migrating-020-030/#java-7-regular-types_2","text":"Search template $Stream$.to(new com.uber.autodispose.MaybeScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forMaybe())","title":"Java 7 regular types"},{"location":"migrating-020-030/#single","text":"","title":"Single"},{"location":"migrating-020-030/#java-8-object-streams_3","text":"Search template $Stream$.to(new com.uber.autodispose.SingleScoper ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forSingle())","title":"Java 8 / Object streams"},{"location":"migrating-020-030/#java-7-regular-types_3","text":"Search template $Stream$.to(new com.uber.autodispose.SingleScoper $Type$ ($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forSingle())","title":"Java 7 regular types"},{"location":"migrating-020-030/#completable","text":"Search template $Stream$.to(new com.uber.autodispose.CompletableScoper($Scope$)) Replacement template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forCompletable())","title":"Completable"},{"location":"migrating-040-050/","text":"0.5.0 switched the API to the new autoDisposable() static factories in AutoDispose.java . To migrate, you can leverage IntelliJ s structural replace. Below is an exhaustive list. I suspect this could be whittled down to Completable replacement and java generic templates, but my script text fu isn t good enough (contributions welcome!). Notes for structural replace. If using Java 8, replace $Type$ with and remove $Type from the replacement template. Would be ideal to combine these into one smart replace but the tooling is a little rough to debug. Flowable Java 8 / Object streams Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forFlowable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$)) Java 7 regular types Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forFlowable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$)) Observable Java 8 / Object streams Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forObservable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$)) Java 7 regular types Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forObservable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$)) Maybe Java 8 / Object streams Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forMaybe()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$)) Java 7 regular types Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forMaybe()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$)) Single Java 8 / Object streams Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forSingle()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$)) Java 7 regular types Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forSingle()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$)) Completable Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forCompletable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Migrating from 0.4.0 to 0.5.0"},{"location":"migrating-040-050/#flowable","text":"","title":"Flowable"},{"location":"migrating-040-050/#java-8-object-streams","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forFlowable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Java 8 / Object streams"},{"location":"migrating-040-050/#java-7-regular-types","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forFlowable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$))","title":"Java 7 regular types"},{"location":"migrating-040-050/#observable","text":"","title":"Observable"},{"location":"migrating-040-050/#java-8-object-streams_1","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forObservable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Java 8 / Object streams"},{"location":"migrating-040-050/#java-7-regular-types_1","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forObservable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$))","title":"Java 7 regular types"},{"location":"migrating-040-050/#maybe","text":"","title":"Maybe"},{"location":"migrating-040-050/#java-8-object-streams_2","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forMaybe()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Java 8 / Object streams"},{"location":"migrating-040-050/#java-7-regular-types_2","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forMaybe()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$))","title":"Java 7 regular types"},{"location":"migrating-040-050/#single","text":"","title":"Single"},{"location":"migrating-040-050/#java-8-object-streams_3","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forSingle()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Java 8 / Object streams"},{"location":"migrating-040-050/#java-7-regular-types_3","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$). $Type$ forSingle()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose. $Type$ autoDisposable($Scope$))","title":"Java 7 regular types"},{"location":"migrating-040-050/#completable","text":"Search template $Stream$.to(com.uber.autodispose.AutoDispose.with($Scope$).forCompletable()) Replacement template $Stream$.as(com.uber.autodispose.AutoDispose.autoDisposable($Scope$))","title":"Completable"},{"location":"1.x/autodispose/","text":"autodispose AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a provided scope via disposal/cancellation. The idea is simple: construct your chain like any other, and then at subscription you simply drop in the relevant factory call + method for that type as a converter. In everyday use, it usually looks like this: myObservable .doStuff() .as(autoDisposable(this)) // -- AutoDispose .subscribe(s - ...); By doing this, you will automatically unsubscribe from myObservable as indicated by your scope this helps prevent many classes of errors when an observable emits and item, but the actions taken in the subscription are no longer valid. For instance, if a network request comes back after a UI has already been torn down, the UI can t be updated - this pattern prevents this type of bug. Packages Name Summary com.uber.autodispose Core implementation. com.uber.autodispose.internal com.uber.autodispose.observers These are observers AutoDispose uses when scoping an observable. They are exposed as a public API to allow for consumers to watch for them if they want, such as in RxJava plugins. Index All Types","title":"Home"},{"location":"1.x/autodispose/#packages","text":"Name Summary com.uber.autodispose Core implementation. com.uber.autodispose.internal com.uber.autodispose.observers These are observers AutoDispose uses when scoping an observable. They are exposed as a public API to allow for consumers to watch for them if they want, such as in RxJava plugins.","title":"Packages"},{"location":"1.x/autodispose/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose/alltypes/","text":"AutoDispose is an RxJava 2 tool for automatically binding the execution of RxJava 2 streams to a provided scope via disposal/cancellation. All Types Name Summary com.uber.autodispose.AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](../com.uber.autodispose/-auto-dispose/auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. com.uber.autodispose.AutoDisposeConverter A custom converter that implements all the RxJava types converters, for use with the as() operator. com.uber.autodispose.AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations. com.uber.autodispose.observers.AutoDisposingCompletableObserver A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingMaybeObserver A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingObserver A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingSingleObserver A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingSubscriber A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. io.reactivex.Completable (extensions in package com.uber.autodispose) com.uber.autodispose.CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads. com.uber.autodispose.internal.DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets. io.reactivex.Flowable (extensions in package com.uber.autodispose) com.uber.autodispose.FlowableSubscribeProxy Subscribe proxy that matches Flowable s subscribe overloads. io.reactivex.Maybe (extensions in package com.uber.autodispose) com.uber.autodispose.MaybeSubscribeProxy Subscribe proxy that matches Maybe s subscribe overloads. io.reactivex.Observable (extensions in package com.uber.autodispose) com.uber.autodispose.ObservableSubscribeProxy Subscribe proxy that matches Observable s subscribe overloads. com.uber.autodispose.OutsideScopeException Signifies an error occurred due to execution starting outside the lifecycle. io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose) com.uber.autodispose.ParallelFlowableSubscribeProxy Subscribe proxy that matches ParallelFlowable s subscribe overloads. com.uber.autodispose.ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal io.reactivex.Single (extensions in package com.uber.autodispose) com.uber.autodispose.SingleSubscribeProxy Subscribe proxy that matches Single s subscribe overloads. com.uber.autodispose.TestScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"Home"},{"location":"1.x/autodispose/alltypes/#all-types","text":"Name Summary com.uber.autodispose.AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](../com.uber.autodispose/-auto-dispose/auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. com.uber.autodispose.AutoDisposeConverter A custom converter that implements all the RxJava types converters, for use with the as() operator. com.uber.autodispose.AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations. com.uber.autodispose.observers.AutoDisposingCompletableObserver A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingMaybeObserver A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingObserver A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingSingleObserver A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. com.uber.autodispose.observers.AutoDisposingSubscriber A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. io.reactivex.Completable (extensions in package com.uber.autodispose) com.uber.autodispose.CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads. com.uber.autodispose.internal.DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets. io.reactivex.Flowable (extensions in package com.uber.autodispose) com.uber.autodispose.FlowableSubscribeProxy Subscribe proxy that matches Flowable s subscribe overloads. io.reactivex.Maybe (extensions in package com.uber.autodispose) com.uber.autodispose.MaybeSubscribeProxy Subscribe proxy that matches Maybe s subscribe overloads. io.reactivex.Observable (extensions in package com.uber.autodispose) com.uber.autodispose.ObservableSubscribeProxy Subscribe proxy that matches Observable s subscribe overloads. com.uber.autodispose.OutsideScopeException Signifies an error occurred due to execution starting outside the lifecycle. io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose) com.uber.autodispose.ParallelFlowableSubscribeProxy Subscribe proxy that matches ParallelFlowable s subscribe overloads. com.uber.autodispose.ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal io.reactivex.Single (extensions in package com.uber.autodispose) com.uber.autodispose.SingleSubscribeProxy Subscribe proxy that matches Single s subscribe overloads. com.uber.autodispose.TestScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"All Types"},{"location":"1.x/autodispose/com.uber.autodispose/","text":"autodispose / com.uber.autodispose Package com.uber.autodispose Core implementation. Types Name Summary AutoDispose class AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](-auto-dispose/auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. AutoDisposeConverter interface AutoDisposeConverter T : Any : FlowableConverter T , FlowableSubscribeProxy T , ParallelFlowableConverter T , ParallelFlowableSubscribeProxy T , ObservableConverter T , ObservableSubscribeProxy T , MaybeConverter T , MaybeSubscribeProxy T , SingleConverter T , SingleSubscribeProxy T , CompletableConverter CompletableSubscribeProxy A custom converter that implements all the RxJava types converters, for use with the as() operator. AutoDisposePlugins class AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations. CompletableSubscribeProxy interface CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads. FlowableSubscribeProxy interface FlowableSubscribeProxy T : Any Subscribe proxy that matches Flowable s subscribe overloads. MaybeSubscribeProxy interface MaybeSubscribeProxy T : Any Subscribe proxy that matches Maybe s subscribe overloads. ObservableSubscribeProxy interface ObservableSubscribeProxy T : Any Subscribe proxy that matches Observable s subscribe overloads. ParallelFlowableSubscribeProxy interface ParallelFlowableSubscribeProxy T : Any Subscribe proxy that matches ParallelFlowable s subscribe overloads. ScopeProvider interface ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal SingleSubscribeProxy interface SingleSubscribeProxy T : Any Subscribe proxy that matches Single s subscribe overloads. TestScopeProvider class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs. Exceptions Name Summary OutsideScopeException open class OutsideScopeException : RuntimeException Signifies an error occurred due to execution starting outside the lifecycle. Extensions for External Classes Name Summary io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"autodispose"},{"location":"1.x/autodispose/com.uber.autodispose/#package-comuberautodispose","text":"Core implementation.","title":"Package com.uber.autodispose"},{"location":"1.x/autodispose/com.uber.autodispose/#types","text":"Name Summary AutoDispose class AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](-auto-dispose/auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. AutoDisposeConverter interface AutoDisposeConverter T : Any : FlowableConverter T , FlowableSubscribeProxy T , ParallelFlowableConverter T , ParallelFlowableSubscribeProxy T , ObservableConverter T , ObservableSubscribeProxy T , MaybeConverter T , MaybeSubscribeProxy T , SingleConverter T , SingleSubscribeProxy T , CompletableConverter CompletableSubscribeProxy A custom converter that implements all the RxJava types converters, for use with the as() operator. AutoDisposePlugins class AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations. CompletableSubscribeProxy interface CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads. FlowableSubscribeProxy interface FlowableSubscribeProxy T : Any Subscribe proxy that matches Flowable s subscribe overloads. MaybeSubscribeProxy interface MaybeSubscribeProxy T : Any Subscribe proxy that matches Maybe s subscribe overloads. ObservableSubscribeProxy interface ObservableSubscribeProxy T : Any Subscribe proxy that matches Observable s subscribe overloads. ParallelFlowableSubscribeProxy interface ParallelFlowableSubscribeProxy T : Any Subscribe proxy that matches ParallelFlowable s subscribe overloads. ScopeProvider interface ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal SingleSubscribeProxy interface SingleSubscribeProxy T : Any Subscribe proxy that matches Single s subscribe overloads. TestScopeProvider class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"Types"},{"location":"1.x/autodispose/com.uber.autodispose/#exceptions","text":"Name Summary OutsideScopeException open class OutsideScopeException : RuntimeException Signifies an error occurred due to execution starting outside the lifecycle.","title":"Exceptions"},{"location":"1.x/autodispose/com.uber.autodispose/#extensions-for-external-classes","text":"Name Summary io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"Extensions for External Classes"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-converter/","text":"autodispose / com.uber.autodispose / AutoDisposeConverter AutoDisposeConverter interface AutoDisposeConverter T : Any : FlowableConverter T , FlowableSubscribeProxy T , ParallelFlowableConverter T , ParallelFlowableSubscribeProxy T , ObservableConverter T , ObservableSubscribeProxy T , MaybeConverter T , MaybeSubscribeProxy T , SingleConverter T , SingleSubscribeProxy T , CompletableConverter CompletableSubscribeProxy A custom converter that implements all the RxJava types converters, for use with the as() operator. Parameters T - the type.","title":" auto dispose converter"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-converter/#autodisposeconverter","text":"interface AutoDisposeConverter T : Any : FlowableConverter T , FlowableSubscribeProxy T , ParallelFlowableConverter T , ParallelFlowableSubscribeProxy T , ObservableConverter T , ObservableSubscribeProxy T , MaybeConverter T , MaybeSubscribeProxy T , SingleConverter T , SingleSubscribeProxy T , CompletableConverter CompletableSubscribeProxy A custom converter that implements all the RxJava types converters, for use with the as() operator.","title":"AutoDisposeConverter"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-converter/#parameters","text":"T - the type.","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/","text":"autodispose / com.uber.autodispose / AutoDispose AutoDispose class AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. See Also Flowable#as(io.reactivex.FlowableConverter) Observable#as(io.reactivex.ObservableConverter) Maybe#as(io.reactivex.MaybeConverter) Single#as(io.reactivex.SingleConverter) Completable#as(io.reactivex.CompletableConverter) Functions Name Summary autoDisposable static fun T : Any autoDisposable(provider: ScopeProvider ): AutoDisposeConverter T Entry point for auto-disposing streams from a ScopeProvider. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ` br ``` br `static fun T : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` autoDisposable(scope: `[`CompletableSource`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html)`): `[`AutoDisposeConverter`](../-auto-dispose-converter.md)` `[`T`](auto-disposable.md#T)` ` br Entry point for auto-disposing streams from a CompletableSource. br Example usage: Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ``` |","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/#autodispose","text":"class AutoDispose Factories for autodispose converters that can be used with RxJava types corresponding as(...) methods to transform them into auto-disposing streams. There are several static autoDisposable(...) entry points, with the most basic being a simple `[ #autoDisposable(CompletableSource)`](auto-disposable.md). The provided CompletableSource is ultimately what every scope resolves to under the hood, and AutoDispose has some built-in understanding for predefined types. The scope is considered ended upon onComplete emission of this Completable. This is structured in such a way to be friendly to autocompletion in IDEs, where the no-parameter generic method will autocomplete with the appropriate generic parameters in Java 7, or implicitly in =8. See Also Flowable#as(io.reactivex.FlowableConverter) Observable#as(io.reactivex.ObservableConverter) Maybe#as(io.reactivex.MaybeConverter) Single#as(io.reactivex.SingleConverter) Completable#as(io.reactivex.CompletableConverter)","title":"AutoDispose"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/#functions","text":"Name Summary autoDisposable static fun T : Any autoDisposable(provider: ScopeProvider ): AutoDisposeConverter T Entry point for auto-disposing streams from a ScopeProvider. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ` br ``` br `static fun T : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` autoDisposable(scope: `[`CompletableSource`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html)`): `[`AutoDisposeConverter`](../-auto-dispose-converter.md)` `[`T`](auto-disposable.md#T)` ` br Entry point for auto-disposing streams from a CompletableSource. br Example usage: Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ``` |","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/auto-disposable/","text":"autodispose / com.uber.autodispose / AutoDispose / autoDisposable autoDisposable static fun T : Any autoDisposable(provider: ScopeProvider ): AutoDisposeConverter T Entry point for auto-disposing streams from a ScopeProvider. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ` Parameters provider - the target scope provider T - the stream type. Return an AutoDisposeConverter to transform with operators like `[ `](#) static fun T : Any autoDisposable(scope: CompletableSource ): AutoDisposeConverter T Entry point for auto-disposing streams from a CompletableSource. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) ` Parameters scope - the target scope T - the stream type. Return an AutoDisposeConverter to transform with operators like `[ `](#)","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/auto-disposable/#autodisposable","text":"static fun T : Any autoDisposable(provider: ScopeProvider ): AutoDisposeConverter T Entry point for auto-disposing streams from a ScopeProvider. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) `","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/auto-disposable/#parameters","text":"provider - the target scope provider T - the stream type. Return an AutoDisposeConverter to transform with operators like `[ `](#) static fun T : Any autoDisposable(scope: CompletableSource ): AutoDisposeConverter T Entry point for auto-disposing streams from a CompletableSource. Example usage: ` Observable.just(1) .as(autoDisposable(scope)) // Static import .subscribe(...) `","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose/auto-disposable/#parameters_1","text":"scope - the target scope T - the stream type. Return an AutoDisposeConverter to transform with operators like `[ `](#)","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins AutoDisposePlugins class AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations. Functions Name Summary getFillInOutsideScopeExceptionStacktraces static fun getFillInOutsideScopeExceptionStacktraces(): Boolean getOutsideScopeHandler static fun getOutsideScopeHandler(): Consumer in OutsideScopeException ? isLockdown static fun isLockdown(): Boolean Returns true if the plugins were locked down. lockdown static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins. reset static fun reset(): Unit Removes all handlers and resets to default behavior. setFillInOutsideScopeExceptionStacktraces static fun setFillInOutsideScopeExceptionStacktraces(fillInStacktrace: Boolean ): Unit setOutsideScopeHandler static fun setOutsideScopeHandler(handler: Consumer in OutsideScopeException ?): Unit","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/#autodisposeplugins","text":"class AutoDisposePlugins Utility class to inject handlers to certain standard autodispose-lifecycle operations.","title":"AutoDisposePlugins"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/#functions","text":"Name Summary getFillInOutsideScopeExceptionStacktraces static fun getFillInOutsideScopeExceptionStacktraces(): Boolean getOutsideScopeHandler static fun getOutsideScopeHandler(): Consumer in OutsideScopeException ? isLockdown static fun isLockdown(): Boolean Returns true if the plugins were locked down. lockdown static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins. reset static fun reset(): Unit Removes all handlers and resets to default behavior. setFillInOutsideScopeExceptionStacktraces static fun setFillInOutsideScopeExceptionStacktraces(fillInStacktrace: Boolean ): Unit setOutsideScopeHandler static fun setOutsideScopeHandler(handler: Consumer in OutsideScopeException ?): Unit","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/get-fill-in-outside-scope-exception-stacktraces/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / getFillInOutsideScopeExceptionStacktraces getFillInOutsideScopeExceptionStacktraces static fun getFillInOutsideScopeExceptionStacktraces(): Boolean Return the value indicating whether or not to fill in stacktraces in .","title":"Get fill in outside scope exception stacktraces"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/get-fill-in-outside-scope-exception-stacktraces/#getfillinoutsidescopeexceptionstacktraces","text":"static fun getFillInOutsideScopeExceptionStacktraces(): Boolean Return the value indicating whether or not to fill in stacktraces in .","title":"getFillInOutsideScopeExceptionStacktraces"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/get-outside-scope-handler/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / getOutsideScopeHandler getOutsideScopeHandler @Nullable static fun getOutsideScopeHandler(): Consumer in OutsideScopeException ? Return the value for handling OutsideScopeException.","title":"Get outside scope handler"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/get-outside-scope-handler/#getoutsidescopehandler","text":"@Nullable static fun getOutsideScopeHandler(): Consumer in OutsideScopeException ? Return the value for handling OutsideScopeException.","title":"getOutsideScopeHandler"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/is-lockdown/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / isLockdown isLockdown static fun isLockdown(): Boolean Returns true if the plugins were locked down. Return true if the plugins were locked down","title":"Is lockdown"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/is-lockdown/#islockdown","text":"static fun isLockdown(): Boolean Returns true if the plugins were locked down. Return true if the plugins were locked down","title":"isLockdown"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/lockdown/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / lockdown lockdown static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins.","title":"Lockdown"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/lockdown/#lockdown","text":"static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins.","title":"lockdown"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/reset/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / reset reset static fun reset(): Unit Removes all handlers and resets to default behavior.","title":"Reset"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/reset/#reset","text":"static fun reset(): Unit Removes all handlers and resets to default behavior.","title":"reset"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-fill-in-outside-scope-exception-stacktraces/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / setFillInOutsideScopeExceptionStacktraces setFillInOutsideScopeExceptionStacktraces static fun setFillInOutsideScopeExceptionStacktraces(fillInStacktrace: Boolean ): Unit Parameters fillInStacktrace - true to fill in stacktraces in OutsideScopeExceptions. false to disable them (and use them as signals only). Disabling them, if you don t care about the stacktraces, can result in some minor performance improvements.","title":"Set fill in outside scope exception stacktraces"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-fill-in-outside-scope-exception-stacktraces/#setfillinoutsidescopeexceptionstacktraces","text":"static fun setFillInOutsideScopeExceptionStacktraces(fillInStacktrace: Boolean ): Unit","title":"setFillInOutsideScopeExceptionStacktraces"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-fill-in-outside-scope-exception-stacktraces/#parameters","text":"fillInStacktrace - true to fill in stacktraces in OutsideScopeExceptions. false to disable them (and use them as signals only). Disabling them, if you don t care about the stacktraces, can result in some minor performance improvements.","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-outside-scope-handler/","text":"autodispose / com.uber.autodispose / AutoDisposePlugins / setOutsideScopeHandler setOutsideScopeHandler static fun setOutsideScopeHandler(@Nullable handler: Consumer in OutsideScopeException ?): Unit Parameters handler - the consumer for handling OutsideScopeException to set, null allowed","title":"Set outside scope handler"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-outside-scope-handler/#setoutsidescopehandler","text":"static fun setOutsideScopeHandler(@Nullable handler: Consumer in OutsideScopeException ?): Unit","title":"setOutsideScopeHandler"},{"location":"1.x/autodispose/com.uber.autodispose/-auto-dispose-plugins/set-outside-scope-handler/#parameters","text":"handler - the consumer for handling OutsideScopeException to set, null allowed","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/","text":"autodispose / com.uber.autodispose / CompletableSubscribeProxy CompletableSubscribeProxy interface CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Completable#subscribe()`](#).`abstract fun subscribe(action: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Completable#subscribe(Action) . abstract fun subscribe(action: Action , onError: Consumer in Throwable ): Disposable Proxy for [`Completable#subscribe(Action, Consumer)`](#).`abstract fun subscribe(observer: `[`CompletableObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableObserver.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Completable#subscribe(CompletableObserver) . subscribeWith abstract fun E : CompletableObserver subscribeWith(observer: E ): E Proxy for `[ Completable#subscribeWith(CompletableObserver)`](#). test abstract fun test(): TestObserver Void Proxy for [`Completable#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`Void`](http://docs.oracle.com/javase/6/docs/api/java/lang/Void.html)` ` br Proxy for Completable#test(boolean) .","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/#completablesubscribeproxy","text":"interface CompletableSubscribeProxy Subscribe proxy that matches Completable s subscribe overloads.","title":"CompletableSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Completable#subscribe()`](#).`abstract fun subscribe(action: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Completable#subscribe(Action) . abstract fun subscribe(action: Action , onError: Consumer in Throwable ): Disposable Proxy for [`Completable#subscribe(Action, Consumer)`](#).`abstract fun subscribe(observer: `[`CompletableObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableObserver.html)`): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Completable#subscribe(CompletableObserver) . subscribeWith abstract fun E : CompletableObserver subscribeWith(observer: E ): E Proxy for `[ Completable#subscribeWith(CompletableObserver)`](#). test abstract fun test(): TestObserver Void Proxy for [`Completable#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`Void`](http://docs.oracle.com/javase/6/docs/api/java/lang/Void.html)` ` br Proxy for Completable#test(boolean) .","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/subscribe-with/","text":"autodispose / com.uber.autodispose / CompletableSubscribeProxy / subscribeWith subscribeWith @CheckReturnValue abstract fun E : CompletableObserver subscribeWith(observer: E ): E Proxy for `[ Completable#subscribeWith(CompletableObserver)`](#). Return a CompletableObserver","title":"Subscribe with"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/subscribe-with/#subscribewith","text":"@CheckReturnValue abstract fun E : CompletableObserver subscribeWith(observer: E ): E Proxy for `[ Completable#subscribeWith(CompletableObserver)`](#). Return a CompletableObserver","title":"subscribeWith"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / CompletableSubscribeProxy / subscribe subscribe abstract fun subscribe(): Disposable Proxy for `[ Completable#subscribe()`](#). Return a Disposable abstract fun subscribe(action: Action ): Disposable Proxy for `[ Completable#subscribe(Action)`](#). Return a Disposable abstract fun subscribe(action: Action , onError: Consumer in Throwable ): Disposable Proxy for `[ Completable#subscribe(Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: CompletableObserver ): Unit Proxy for `[ Completable#subscribe(CompletableObserver)`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(): Disposable Proxy for `[ Completable#subscribe()`](#). Return a Disposable abstract fun subscribe(action: Action ): Disposable Proxy for `[ Completable#subscribe(Action)`](#). Return a Disposable abstract fun subscribe(action: Action , onError: Consumer in Throwable ): Disposable Proxy for `[ Completable#subscribe(Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: CompletableObserver ): Unit Proxy for `[ Completable#subscribe(CompletableObserver)`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/test/","text":"autodispose / com.uber.autodispose / CompletableSubscribeProxy / test test @CheckReturnValue abstract fun test(): TestObserver Void Proxy for `[ Completable#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver Void Proxy for `[ Completable#test(boolean)`](#). Return a TestObserver","title":"Test"},{"location":"1.x/autodispose/com.uber.autodispose/-completable-subscribe-proxy/test/#test","text":"@CheckReturnValue abstract fun test(): TestObserver Void Proxy for `[ Completable#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver Void Proxy for `[ Completable#test(boolean)`](#). Return a TestObserver","title":"test"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/","text":"autodispose / com.uber.autodispose / FlowableSubscribeProxy FlowableSubscribeProxy interface FlowableSubscribeProxy T : Any Subscribe proxy that matches Flowable s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Flowable#subscribe()`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Flowable#subscribe(Consumer) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Flowable#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Flowable#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Subscription ): Disposable Proxy for [`Flowable#subscribe(Consumer, Consumer, Action, Consumer)`](#).`abstract fun subscribe(observer: Subscriber in `[`T`](index.md#T)` ): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Flowable#subscribe(Subscriber) . subscribeWith abstract fun E : Subscriber in T subscribeWith(observer: E ): E Proxy for `[ Flowable#subscribeWith(Subscriber)`](#). test abstract fun test(): TestSubscriber T Proxy for [`Flowable#test()`](#).`abstract fun test(initialRequest: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`TestSubscriber`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subscribers/TestSubscriber.html)` `[`T`](index.md#T)` ` br Proxy for Flowable#test(long) . abstract fun test(initialRequest: Long , cancel: Boolean ): TestSubscriber T Proxy for `[ Flowable#test(long, boolean)`](#).","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/#flowablesubscribeproxy","text":"interface FlowableSubscribeProxy T : Any Subscribe proxy that matches Flowable s subscribe overloads.","title":"FlowableSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Flowable#subscribe()`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Flowable#subscribe(Consumer) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Flowable#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Flowable#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Subscription ): Disposable Proxy for [`Flowable#subscribe(Consumer, Consumer, Action, Consumer)`](#).`abstract fun subscribe(observer: Subscriber in `[`T`](index.md#T)` ): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Flowable#subscribe(Subscriber) . subscribeWith abstract fun E : Subscriber in T subscribeWith(observer: E ): E Proxy for `[ Flowable#subscribeWith(Subscriber)`](#). test abstract fun test(): TestSubscriber T Proxy for [`Flowable#test()`](#).`abstract fun test(initialRequest: `[`Long`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long/index.html)`): `[`TestSubscriber`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/subscribers/TestSubscriber.html)` `[`T`](index.md#T)` ` br Proxy for Flowable#test(long) . abstract fun test(initialRequest: Long , cancel: Boolean ): TestSubscriber T Proxy for `[ Flowable#test(long, boolean)`](#).","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/subscribe-with/","text":"autodispose / com.uber.autodispose / FlowableSubscribeProxy / subscribeWith subscribeWith @CheckReturnValue abstract fun E : Subscriber in T subscribeWith(observer: E ): E Proxy for `[ Flowable#subscribeWith(Subscriber)`](#). Return an Subscriber","title":"Subscribe with"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/subscribe-with/#subscribewith","text":"@CheckReturnValue abstract fun E : Subscriber in T subscribeWith(observer: E ): E Proxy for `[ Flowable#subscribeWith(Subscriber)`](#). Return an Subscriber","title":"subscribeWith"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / FlowableSubscribeProxy / subscribe subscribe abstract fun subscribe(): Disposable Proxy for `[ Flowable#subscribe()`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T ): Disposable Proxy for `[ Flowable#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Subscription ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer, Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: Subscriber in T ): Unit Proxy for `[ Flowable#subscribe(Subscriber)`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(): Disposable Proxy for `[ Flowable#subscribe()`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T ): Disposable Proxy for `[ Flowable#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Subscription ): Disposable Proxy for `[ Flowable#subscribe(Consumer, Consumer, Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: Subscriber in T ): Unit Proxy for `[ Flowable#subscribe(Subscriber)`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/test/","text":"autodispose / com.uber.autodispose / FlowableSubscribeProxy / test test @CheckReturnValue abstract fun test(): TestSubscriber T Proxy for `[ Flowable#test()`](#). Return a TestSubscriber @CheckReturnValue abstract fun test(initialRequest: Long ): TestSubscriber T Proxy for `[ Flowable#test(long)`](#). Return a TestSubscriber @CheckReturnValue abstract fun test(initialRequest: Long , cancel: Boolean ): TestSubscriber T Proxy for `[ Flowable#test(long, boolean)`](#). Return a TestSubscriber","title":"Test"},{"location":"1.x/autodispose/com.uber.autodispose/-flowable-subscribe-proxy/test/#test","text":"@CheckReturnValue abstract fun test(): TestSubscriber T Proxy for `[ Flowable#test()`](#). Return a TestSubscriber @CheckReturnValue abstract fun test(initialRequest: Long ): TestSubscriber T Proxy for `[ Flowable#test(long)`](#). Return a TestSubscriber @CheckReturnValue abstract fun test(initialRequest: Long , cancel: Boolean ): TestSubscriber T Proxy for `[ Flowable#test(long, boolean)`](#). Return a TestSubscriber","title":"test"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/","text":"autodispose / com.uber.autodispose / MaybeSubscribeProxy MaybeSubscribeProxy interface MaybeSubscribeProxy T : Any Subscribe proxy that matches Maybe s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Maybe#subscribe()`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Maybe#subscribe(Consumer) . abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Maybe#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Maybe#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(observer: MaybeObserver in T ): Unit Proxy for `[ Maybe#subscribe(MaybeObserver)`](#). subscribeWith abstract fun E : MaybeObserver in T subscribeWith(observer: E ): E Proxy for `[ Maybe#subscribeWith(MaybeObserver)`](#). test abstract fun test(): TestObserver T Proxy for [`Maybe#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Maybe#test(boolean) .","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/#maybesubscribeproxy","text":"interface MaybeSubscribeProxy T : Any Subscribe proxy that matches Maybe s subscribe overloads.","title":"MaybeSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Maybe#subscribe()`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Maybe#subscribe(Consumer) . abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Maybe#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Maybe#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(observer: MaybeObserver in T ): Unit Proxy for `[ Maybe#subscribe(MaybeObserver)`](#). subscribeWith abstract fun E : MaybeObserver in T subscribeWith(observer: E ): E Proxy for `[ Maybe#subscribeWith(MaybeObserver)`](#). test abstract fun test(): TestObserver T Proxy for [`Maybe#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Maybe#test(boolean) .","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/subscribe-with/","text":"autodispose / com.uber.autodispose / MaybeSubscribeProxy / subscribeWith subscribeWith @CheckReturnValue abstract fun E : MaybeObserver in T subscribeWith(observer: E ): E Proxy for `[ Maybe#subscribeWith(MaybeObserver)`](#). Return a MaybeObserver","title":"Subscribe with"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/subscribe-with/#subscribewith","text":"@CheckReturnValue abstract fun E : MaybeObserver in T subscribeWith(observer: E ): E Proxy for `[ Maybe#subscribeWith(MaybeObserver)`](#). Return a MaybeObserver","title":"subscribeWith"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / MaybeSubscribeProxy / subscribe subscribe abstract fun subscribe(): Disposable Proxy for `[ Maybe#subscribe()`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T ): Disposable Proxy for `[ Maybe#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Maybe#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Maybe#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(observer: MaybeObserver in T ): Unit Proxy for `[ Maybe#subscribe(MaybeObserver)`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(): Disposable Proxy for `[ Maybe#subscribe()`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T ): Disposable Proxy for `[ Maybe#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Maybe#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Maybe#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(observer: MaybeObserver in T ): Unit Proxy for `[ Maybe#subscribe(MaybeObserver)`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/test/","text":"autodispose / com.uber.autodispose / MaybeSubscribeProxy / test test @CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Maybe#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver T Proxy for `[ Maybe#test(boolean)`](#). Return a TestObserver","title":"Test"},{"location":"1.x/autodispose/com.uber.autodispose/-maybe-subscribe-proxy/test/#test","text":"@CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Maybe#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver T Proxy for `[ Maybe#test(boolean)`](#). Return a TestObserver","title":"test"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/","text":"autodispose / com.uber.autodispose / ObservableSubscribeProxy ObservableSubscribeProxy interface ObservableSubscribeProxy T : Any Subscribe proxy that matches Observable s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Observable#subscribe()`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Observable#subscribe(Consumer) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Observable#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Observable#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Disposable ): Disposable Proxy for [`Observable#subscribe(Consumer, Consumer, Action, Consumer)`](#).`abstract fun subscribe(observer: `[`Observer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observer.html)` in `[`T`](index.md#T)` ): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Observable#subscribe(Observer) . subscribeWith abstract fun E : Observer in T subscribeWith(observer: E ): E Proxy for `[ Observable#subscribeWith(Observer)`](#). test abstract fun test(): TestObserver T Proxy for [`Observable#test()`](#).`abstract fun test(dispose: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Observable#test(boolean) .","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/#observablesubscribeproxy","text":"interface ObservableSubscribeProxy T : Any Subscribe proxy that matches Observable s subscribe overloads.","title":"ObservableSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Observable#subscribe()`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Observable#subscribe(Consumer) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for [`Observable#subscribe(Consumer, Consumer)`](#).`abstract fun subscribe(onNext: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` , onComplete: `[`Action`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Action.html)`): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Observable#subscribe(Consumer, Consumer, Action) . abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Disposable ): Disposable Proxy for [`Observable#subscribe(Consumer, Consumer, Action, Consumer)`](#).`abstract fun subscribe(observer: `[`Observer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observer.html)` in `[`T`](index.md#T)` ): `[`Unit`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html) br Proxy for Observable#subscribe(Observer) . subscribeWith abstract fun E : Observer in T subscribeWith(observer: E ): E Proxy for `[ Observable#subscribeWith(Observer)`](#). test abstract fun test(): TestObserver T Proxy for [`Observable#test()`](#).`abstract fun test(dispose: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Observable#test(boolean) .","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/subscribe-with/","text":"autodispose / com.uber.autodispose / ObservableSubscribeProxy / subscribeWith subscribeWith @CheckReturnValue abstract fun E : Observer in T subscribeWith(observer: E ): E Proxy for `[ Observable#subscribeWith(Observer)`](#). Return an Observer","title":"Subscribe with"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/subscribe-with/#subscribewith","text":"@CheckReturnValue abstract fun E : Observer in T subscribeWith(observer: E ): E Proxy for `[ Observable#subscribeWith(Observer)`](#). Return an Observer","title":"subscribeWith"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / ObservableSubscribeProxy / subscribe subscribe abstract fun subscribe(): Disposable Proxy for `[ Observable#subscribe()`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T ): Disposable Proxy for `[ Observable#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Disposable ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer, Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: Observer in T ): Unit Proxy for `[ Observable#subscribe(Observer)`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(): Disposable Proxy for `[ Observable#subscribe()`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T ): Disposable Proxy for `[ Observable#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer, Action)`](#). Return a Disposable abstract fun subscribe(onNext: Consumer in T , onError: Consumer in Throwable , onComplete: Action , onSubscribe: Consumer in Disposable ): Disposable Proxy for `[ Observable#subscribe(Consumer, Consumer, Action, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: Observer in T ): Unit Proxy for `[ Observable#subscribe(Observer)`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/test/","text":"autodispose / com.uber.autodispose / ObservableSubscribeProxy / test test @CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Observable#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(dispose: Boolean ): TestObserver T Proxy for `[ Observable#test(boolean)`](#). Return a TestObserver","title":"Test"},{"location":"1.x/autodispose/com.uber.autodispose/-observable-subscribe-proxy/test/#test","text":"@CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Observable#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(dispose: Boolean ): TestObserver T Proxy for `[ Observable#test(boolean)`](#). Return a TestObserver","title":"test"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/","text":"autodispose / com.uber.autodispose / OutsideScopeException OutsideScopeException open class OutsideScopeException : RuntimeException Signifies an error occurred due to execution starting outside the lifecycle. Constructors Name Summary init OutsideScopeException(s: String ) Functions Name Summary fillInStackTrace fun fillInStackTrace(): Throwable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/#outsidescopeexception","text":"open class OutsideScopeException : RuntimeException Signifies an error occurred due to execution starting outside the lifecycle.","title":"OutsideScopeException"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/#constructors","text":"Name Summary init OutsideScopeException(s: String )","title":"Constructors"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/#functions","text":"Name Summary fillInStackTrace fun fillInStackTrace(): Throwable","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/-init-/","text":"autodispose / com.uber.autodispose / OutsideScopeException / init init OutsideScopeException(s: String )","title":" init "},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/-init-/#init","text":"OutsideScopeException(s: String )","title":"&lt;init&gt;"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/fill-in-stack-trace/","text":"autodispose / com.uber.autodispose / OutsideScopeException / fillInStackTrace fillInStackTrace fun fillInStackTrace(): Throwable","title":"Fill in stack trace"},{"location":"1.x/autodispose/com.uber.autodispose/-outside-scope-exception/fill-in-stack-trace/#fillinstacktrace","text":"fun fillInStackTrace(): Throwable","title":"fillInStackTrace"},{"location":"1.x/autodispose/com.uber.autodispose/-parallel-flowable-subscribe-proxy/","text":"autodispose / com.uber.autodispose / ParallelFlowableSubscribeProxy ParallelFlowableSubscribeProxy interface ParallelFlowableSubscribeProxy T : Any Subscribe proxy that matches ParallelFlowable s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(subscribers: Array Subscriber in T ): Unit Proxy for `[ ParallelFlowable#subscribe(Subscriber[])`](#).","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-parallel-flowable-subscribe-proxy/#parallelflowablesubscribeproxy","text":"interface ParallelFlowableSubscribeProxy T : Any Subscribe proxy that matches ParallelFlowable s subscribe overloads.","title":"ParallelFlowableSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-parallel-flowable-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(subscribers: Array Subscriber in T ): Unit Proxy for `[ ParallelFlowable#subscribe(Subscriber[])`](#).","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-parallel-flowable-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / ParallelFlowableSubscribeProxy / subscribe subscribe abstract fun subscribe(subscribers: Array Subscriber in T ): Unit Proxy for `[ ParallelFlowable#subscribe(Subscriber[])`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-parallel-flowable-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(subscribers: Array Subscriber in T ): Unit Proxy for `[ ParallelFlowable#subscribe(Subscriber[])`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/","text":"autodispose / com.uber.autodispose / ScopeProvider ScopeProvider @DoNotMock(\"Use TestScopeProvider instead\") interface ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal Properties Name Summary UNBOUND static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound. Functions Name Summary requestScope abstract fun requestScope(): CompletableSource Inheritors Name Summary TestScopeProvider class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/#scopeprovider","text":"@DoNotMock(\"Use TestScopeProvider instead\") interface ScopeProvider Provides a CompletableSource representation of a scope. The emission of this is the signal","title":"ScopeProvider"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/#properties","text":"Name Summary UNBOUND static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound.","title":"Properties"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/#functions","text":"Name Summary requestScope abstract fun requestScope(): CompletableSource","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/#inheritors","text":"Name Summary TestScopeProvider class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"Inheritors"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/-u-n-b-o-u-n-d/","text":"autodispose / com.uber.autodispose / ScopeProvider / UNBOUND UNBOUND static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound.","title":" u n b o u n d"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/-u-n-b-o-u-n-d/#unbound","text":"static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound.","title":"UNBOUND"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/request-scope/","text":"autodispose / com.uber.autodispose / ScopeProvider / requestScope requestScope @CheckReturnValue abstract fun requestScope(): CompletableSource Exceptions Exception - scope retrievals throws an exception, such as OutsideScopeException Return a CompletableSource that, upon completion, will trigger disposal.","title":"Request scope"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/request-scope/#requestscope","text":"@CheckReturnValue abstract fun requestScope(): CompletableSource","title":"requestScope"},{"location":"1.x/autodispose/com.uber.autodispose/-scope-provider/request-scope/#exceptions","text":"Exception - scope retrievals throws an exception, such as OutsideScopeException Return a CompletableSource that, upon completion, will trigger disposal.","title":"Exceptions"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/","text":"autodispose / com.uber.autodispose / SingleSubscribeProxy SingleSubscribeProxy interface SingleSubscribeProxy T : Any Subscribe proxy that matches Single s subscribe overloads. Functions Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Single#subscribe()`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Single#subscribe(Consumer) . abstract fun subscribe(biConsumer: BiConsumer in T , in Throwable ): Disposable Proxy for [`Single#subscribe(BiConsumer)`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Single#subscribe(Consumer, Consumer) . abstract fun subscribe(observer: SingleObserver in T ): Unit Proxy for `[ Single#subscribe(SingleObserver)`](#). subscribeWith abstract fun E : SingleObserver in T subscribeWith(observer: E ): E Proxy for `[ Single#subscribeWith(SingleObserver)`](#). test abstract fun test(): TestObserver T Proxy for [`Single#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Single#test(boolean) .","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/#singlesubscribeproxy","text":"interface SingleSubscribeProxy T : Any Subscribe proxy that matches Single s subscribe overloads.","title":"SingleSubscribeProxy"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/#functions","text":"Name Summary subscribe abstract fun subscribe(): Disposable Proxy for [`Single#subscribe()`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Single#subscribe(Consumer) . abstract fun subscribe(biConsumer: BiConsumer in T , in Throwable ): Disposable Proxy for [`Single#subscribe(BiConsumer)`](#).`abstract fun subscribe(onSuccess: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`T`](index.md#T)` , onError: `[`Consumer`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/functions/Consumer.html)` in `[`Throwable`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html)` ): `[`Disposable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/Disposable.html) br Proxy for Single#subscribe(Consumer, Consumer) . abstract fun subscribe(observer: SingleObserver in T ): Unit Proxy for `[ Single#subscribe(SingleObserver)`](#). subscribeWith abstract fun E : SingleObserver in T subscribeWith(observer: E ): E Proxy for `[ Single#subscribeWith(SingleObserver)`](#). test abstract fun test(): TestObserver T Proxy for [`Single#test()`](#).`abstract fun test(cancel: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`TestObserver`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/observers/TestObserver.html)` `[`T`](index.md#T)` ` br Proxy for Single#test(boolean) .","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/subscribe-with/","text":"autodispose / com.uber.autodispose / SingleSubscribeProxy / subscribeWith subscribeWith @CheckReturnValue abstract fun E : SingleObserver in T subscribeWith(observer: E ): E Proxy for `[ Single#subscribeWith(SingleObserver)`](#). Return a SingleObserver","title":"Subscribe with"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/subscribe-with/#subscribewith","text":"@CheckReturnValue abstract fun E : SingleObserver in T subscribeWith(observer: E ): E Proxy for `[ Single#subscribeWith(SingleObserver)`](#). Return a SingleObserver","title":"subscribeWith"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/subscribe/","text":"autodispose / com.uber.autodispose / SingleSubscribeProxy / subscribe subscribe abstract fun subscribe(): Disposable Proxy for `[ Single#subscribe()`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T ): Disposable Proxy for `[ Single#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(biConsumer: BiConsumer in T , in Throwable ): Disposable Proxy for `[ Single#subscribe(BiConsumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Single#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: SingleObserver in T ): Unit Proxy for `[ Single#subscribe(SingleObserver)`](#).","title":"Subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/subscribe/#subscribe","text":"abstract fun subscribe(): Disposable Proxy for `[ Single#subscribe()`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T ): Disposable Proxy for `[ Single#subscribe(Consumer)`](#). Return a Disposable abstract fun subscribe(biConsumer: BiConsumer in T , in Throwable ): Disposable Proxy for `[ Single#subscribe(BiConsumer)`](#). Return a Disposable abstract fun subscribe(onSuccess: Consumer in T , onError: Consumer in Throwable ): Disposable Proxy for `[ Single#subscribe(Consumer, Consumer)`](#). Return a Disposable abstract fun subscribe(observer: SingleObserver in T ): Unit Proxy for `[ Single#subscribe(SingleObserver)`](#).","title":"subscribe"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/test/","text":"autodispose / com.uber.autodispose / SingleSubscribeProxy / test test @CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Single#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver T Proxy for `[ Single#test(boolean)`](#). Return a TestObserver","title":"Test"},{"location":"1.x/autodispose/com.uber.autodispose/-single-subscribe-proxy/test/#test","text":"@CheckReturnValue abstract fun test(): TestObserver T Proxy for `[ Single#test()`](#). Return a TestObserver @CheckReturnValue abstract fun test(cancel: Boolean ): TestObserver T Proxy for `[ Single#test(boolean)`](#). Return a TestObserver","title":"test"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/","text":"autodispose / com.uber.autodispose / TestScopeProvider TestScopeProvider class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs. Inherited Properties Name Summary UNBOUND static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound. Functions Name Summary create static fun create(): TestScopeProvider Creates a new provider backed by an internal CompletableSubject. Useful for stubbing or if you only want to use the emit APIs static fun create(delegate: Completable ): TestScopeProvider Creates a new provider backed by delegate . emit fun emit(): Unit Emits a success event, just a simple Object. requestScope fun requestScope(): CompletableSource","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/#testscopeprovider","text":"class TestScopeProvider : ScopeProvider ScopeProvider implementation for testing. You can either back it with your own instance, or just stub it in place and use its public emit APIs.","title":"TestScopeProvider"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/#inherited-properties","text":"Name Summary UNBOUND static val UNBOUND: ScopeProvider A new provider that is unbound , e.g. will emit a completion event to signal that the scope is unbound.","title":"Inherited Properties"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/#functions","text":"Name Summary create static fun create(): TestScopeProvider Creates a new provider backed by an internal CompletableSubject. Useful for stubbing or if you only want to use the emit APIs static fun create(delegate: Completable ): TestScopeProvider Creates a new provider backed by delegate . emit fun emit(): Unit Emits a success event, just a simple Object. requestScope fun requestScope(): CompletableSource","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/create/","text":"autodispose / com.uber.autodispose / TestScopeProvider / create create static fun create(): TestScopeProvider Creates a new provider backed by an internal CompletableSubject. Useful for stubbing or if you only want to use the emit APIs Return the created TestScopeProvider. static fun create(delegate: Completable ): TestScopeProvider Creates a new provider backed by delegate . Parameters delegate - the delegate to back this with. Return the created TestScopeProvider.","title":"Create"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/create/#create","text":"static fun create(): TestScopeProvider Creates a new provider backed by an internal CompletableSubject. Useful for stubbing or if you only want to use the emit APIs Return the created TestScopeProvider. static fun create(delegate: Completable ): TestScopeProvider Creates a new provider backed by delegate .","title":"create"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/create/#parameters","text":"delegate - the delegate to back this with. Return the created TestScopeProvider.","title":"Parameters"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/emit/","text":"autodispose / com.uber.autodispose / TestScopeProvider / emit emit fun emit(): Unit Emits a success event, just a simple Object.","title":"Emit"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/emit/#emit","text":"fun emit(): Unit Emits a success event, just a simple Object.","title":"emit"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/request-scope/","text":"autodispose / com.uber.autodispose / TestScopeProvider / requestScope requestScope fun requestScope(): CompletableSource Overrides ScopeProvider.requestScope","title":"Request scope"},{"location":"1.x/autodispose/com.uber.autodispose/-test-scope-provider/request-scope/#requestscope","text":"fun requestScope(): CompletableSource Overrides ScopeProvider.requestScope","title":"requestScope"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-completable/","text":"autodispose / com.uber.autodispose / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary autoDisposable fun Completable .autoDisposable(scope: Completable ): CompletableSubscribeProxy fun Completable .autoDisposable(provider: ScopeProvider ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary autoDisposable fun Completable .autoDisposable(scope: Completable ): CompletableSubscribeProxy fun Completable .autoDisposable(provider: ScopeProvider ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Completable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-completable/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.Completable / autoDisposable autoDisposable @CheckReturnValue inline fun Completable .autoDisposable(scope: Completable ): CompletableSubscribeProxy @CheckReturnValue inline fun Completable .autoDisposable(provider: ScopeProvider ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-completable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun Completable .autoDisposable(scope: Completable ): CompletableSubscribeProxy @CheckReturnValue inline fun Completable .autoDisposable(provider: ScopeProvider ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-flowable/","text":"autodispose / com.uber.autodispose / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary autoDisposable fun T Flowable T .autoDisposable(scope: Completable ): FlowableSubscribeProxy T fun T Flowable T .autoDisposable(provider: ScopeProvider ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary autoDisposable fun T Flowable T .autoDisposable(scope: Completable ): FlowableSubscribeProxy T fun T Flowable T .autoDisposable(provider: ScopeProvider ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Flowable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-flowable/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.Flowable / autoDisposable autoDisposable @CheckReturnValue inline fun T Flowable T .autoDisposable(scope: Completable ): FlowableSubscribeProxy T @CheckReturnValue inline fun T Flowable T .autoDisposable(provider: ScopeProvider ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Flowable T .autoDisposable(scope: Completable ): FlowableSubscribeProxy T @CheckReturnValue inline fun T Flowable T .autoDisposable(provider: ScopeProvider ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-maybe/","text":"autodispose / com.uber.autodispose / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary autoDisposable fun T Maybe T .autoDisposable(scope: Completable ): MaybeSubscribeProxy T fun T Maybe T .autoDisposable(provider: ScopeProvider ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary autoDisposable fun T Maybe T .autoDisposable(scope: Completable ): MaybeSubscribeProxy T fun T Maybe T .autoDisposable(provider: ScopeProvider ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Maybe"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-maybe/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.Maybe / autoDisposable autoDisposable @CheckReturnValue inline fun T Maybe T .autoDisposable(scope: Completable ): MaybeSubscribeProxy T @CheckReturnValue inline fun T Maybe T .autoDisposable(provider: ScopeProvider ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-maybe/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Maybe T .autoDisposable(scope: Completable ): MaybeSubscribeProxy T @CheckReturnValue inline fun T Maybe T .autoDisposable(provider: ScopeProvider ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-observable/","text":"autodispose / com.uber.autodispose / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary autoDisposable fun T Observable T .autoDisposable(scope: Completable ): ObservableSubscribeProxy T fun T Observable T .autoDisposable(provider: ScopeProvider ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary autoDisposable fun T Observable T .autoDisposable(scope: Completable ): ObservableSubscribeProxy T fun T Observable T .autoDisposable(provider: ScopeProvider ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-observable/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.Observable / autoDisposable autoDisposable @CheckReturnValue inline fun T Observable T .autoDisposable(scope: Completable ): ObservableSubscribeProxy T @CheckReturnValue inline fun T Observable T .autoDisposable(provider: ScopeProvider ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-observable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Observable T .autoDisposable(scope: Completable ): ObservableSubscribeProxy T @CheckReturnValue inline fun T Observable T .autoDisposable(provider: ScopeProvider ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-single/","text":"autodispose / com.uber.autodispose / io.reactivex.Single Extensions for io.reactivex.Single Name Summary autoDisposable fun T Single T .autoDisposable(scope: Completable ): SingleSubscribeProxy T fun T Single T .autoDisposable(provider: ScopeProvider ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary autoDisposable fun T Single T .autoDisposable(scope: Completable ): SingleSubscribeProxy T fun T Single T .autoDisposable(provider: ScopeProvider ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Single"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-single/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.Single / autoDisposable autoDisposable @CheckReturnValue inline fun T Single T .autoDisposable(scope: Completable ): SingleSubscribeProxy T @CheckReturnValue inline fun T Single T .autoDisposable(provider: ScopeProvider ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.-single/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Single T .autoDisposable(scope: Completable ): SingleSubscribeProxy T @CheckReturnValue inline fun T Single T .autoDisposable(provider: ScopeProvider ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.parallel.-parallel-flowable/","text":"autodispose / com.uber.autodispose / io.reactivex.parallel.ParallelFlowable Extensions for io.reactivex.parallel.ParallelFlowable Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(scope: Completable ): ParallelFlowableSubscribeProxy T fun T ParallelFlowable T .autoDisposable(provider: ScopeProvider ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.parallel.-parallel-flowable/#extensions-for-ioreactivexparallelparallelflowable","text":"Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(scope: Completable ): ParallelFlowableSubscribeProxy T fun T ParallelFlowable T .autoDisposable(provider: ScopeProvider ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.parallel.ParallelFlowable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.parallel.-parallel-flowable/auto-disposable/","text":"autodispose / com.uber.autodispose / io.reactivex.parallel.ParallelFlowable / autoDisposable autoDisposable @CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(scope: Completable ): ParallelFlowableSubscribeProxy T @CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(provider: ScopeProvider ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose/com.uber.autodispose/io.reactivex.parallel.-parallel-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(scope: Completable ): ParallelFlowableSubscribeProxy T @CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(provider: ScopeProvider ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose/com.uber.autodispose.internal/","text":"autodispose / com.uber.autodispose.internal Package com.uber.autodispose.internal Annotations Name Summary DoNotMock class DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.internal/#package-comuberautodisposeinternal","text":"","title":"Package com.uber.autodispose.internal"},{"location":"1.x/autodispose/com.uber.autodispose.internal/#annotations","text":"Name Summary DoNotMock class DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":"Annotations"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/","text":"autodispose / com.uber.autodispose.internal / DoNotMock DoNotMock @Inherited @Target([AnnotationTarget.CLASS, AnnotationTarget.FILE]) class DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets. Constructors Name Summary init DoNotMock(value: String ) This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets. Properties Name Summary value val value: String The reason why the annotated type should not be mocked. This should suggest alternative APIs to use for testing objects of this type.","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/#donotmock","text":"@Inherited @Target([AnnotationTarget.CLASS, AnnotationTarget.FILE]) class DoNotMock This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":"DoNotMock"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/#constructors","text":"Name Summary init DoNotMock(value: String ) This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":"Constructors"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/#properties","text":"Name Summary value val value: String The reason why the annotated type should not be mocked. This should suggest alternative APIs to use for testing objects of this type.","title":"Properties"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/-init-/","text":"autodispose / com.uber.autodispose.internal / DoNotMock / init init DoNotMock(value: String ) This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":" init "},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/-init-/#init","text":"DoNotMock(value: String ) This annotation indicates that a given type should not be mocked. This is a copy of what was in Error-Prone s annotations artifact before it was removed, but left for documentation purposes. This has been modified to have CLASS retention and is only applicable to TYPE targets.","title":"&lt;init&gt;"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/value/","text":"autodispose / com.uber.autodispose.internal / DoNotMock / value value val value: String The reason why the annotated type should not be mocked. This should suggest alternative APIs to use for testing objects of this type.","title":"Value"},{"location":"1.x/autodispose/com.uber.autodispose.internal/-do-not-mock/value/#value","text":"val value: String The reason why the annotated type should not be mocked. This should suggest alternative APIs to use for testing objects of this type.","title":"value"},{"location":"1.x/autodispose/com.uber.autodispose.observers/","text":"autodispose / com.uber.autodispose.observers Package com.uber.autodispose.observers These are observers AutoDispose uses when scoping an observable. They are exposed as a public API to allow for consumers to watch for them if they want, such as in RxJava plugins. Types Name Summary AutoDisposingCompletableObserver interface AutoDisposingCompletableObserver : CompletableObserver , Disposable A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingMaybeObserver interface AutoDisposingMaybeObserver T : Any : MaybeObserver T , Disposable A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingObserver interface AutoDisposingObserver T : Any : Observer T , Disposable A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingSingleObserver interface AutoDisposingSingleObserver T : Any : SingleObserver T , Disposable A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingSubscriber interface AutoDisposingSubscriber T : Any : FlowableSubscriber T , Subscription, Disposable A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/#package-comuberautodisposeobservers","text":"These are observers AutoDispose uses when scoping an observable. They are exposed as a public API to allow for consumers to watch for them if they want, such as in RxJava plugins.","title":"Package com.uber.autodispose.observers"},{"location":"1.x/autodispose/com.uber.autodispose.observers/#types","text":"Name Summary AutoDisposingCompletableObserver interface AutoDisposingCompletableObserver : CompletableObserver , Disposable A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingMaybeObserver interface AutoDisposingMaybeObserver T : Any : MaybeObserver T , Disposable A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingObserver interface AutoDisposingObserver T : Any : Observer T , Disposable A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingSingleObserver interface AutoDisposingSingleObserver T : Any : SingleObserver T , Disposable A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. AutoDisposingSubscriber interface AutoDisposingSubscriber T : Any : FlowableSubscriber T , Subscription, Disposable A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"Types"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-completable-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingCompletableObserver AutoDisposingCompletableObserver interface AutoDisposingCompletableObserver : CompletableObserver , Disposable A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. Functions Name Summary delegateObserver abstract fun delegateObserver(): CompletableObserver","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-completable-observer/#autodisposingcompletableobserver","text":"interface AutoDisposingCompletableObserver : CompletableObserver , Disposable A Disposable CompletableObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"AutoDisposingCompletableObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-completable-observer/#functions","text":"Name Summary delegateObserver abstract fun delegateObserver(): CompletableObserver","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-completable-observer/delegate-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingCompletableObserver / delegateObserver delegateObserver abstract fun delegateObserver(): CompletableObserver Return The delegate CompletableObserver that is used under the hood for introspection purposes.","title":"Delegate observer"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-completable-observer/delegate-observer/#delegateobserver","text":"abstract fun delegateObserver(): CompletableObserver Return The delegate CompletableObserver that is used under the hood for introspection purposes.","title":"delegateObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-maybe-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingMaybeObserver AutoDisposingMaybeObserver interface AutoDisposingMaybeObserver T : Any : MaybeObserver T , Disposable A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. Functions Name Summary delegateObserver abstract fun delegateObserver(): MaybeObserver in T","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-maybe-observer/#autodisposingmaybeobserver","text":"interface AutoDisposingMaybeObserver T : Any : MaybeObserver T , Disposable A Disposable MaybeObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"AutoDisposingMaybeObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-maybe-observer/#functions","text":"Name Summary delegateObserver abstract fun delegateObserver(): MaybeObserver in T","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-maybe-observer/delegate-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingMaybeObserver / delegateObserver delegateObserver abstract fun delegateObserver(): MaybeObserver in T Return The delegate MaybeObserver that is used under the hood for introspection purposes.","title":"Delegate observer"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-maybe-observer/delegate-observer/#delegateobserver","text":"abstract fun delegateObserver(): MaybeObserver in T Return The delegate MaybeObserver that is used under the hood for introspection purposes.","title":"delegateObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingObserver AutoDisposingObserver interface AutoDisposingObserver T : Any : Observer T , Disposable A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. Functions Name Summary delegateObserver abstract fun delegateObserver(): Observer in T","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-observer/#autodisposingobserver","text":"interface AutoDisposingObserver T : Any : Observer T , Disposable A Disposable Observer that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"AutoDisposingObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-observer/#functions","text":"Name Summary delegateObserver abstract fun delegateObserver(): Observer in T","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-observer/delegate-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingObserver / delegateObserver delegateObserver abstract fun delegateObserver(): Observer in T Return The delegate Observer that is used under the hood for introspection purposes.","title":"Delegate observer"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-observer/delegate-observer/#delegateobserver","text":"abstract fun delegateObserver(): Observer in T Return The delegate Observer that is used under the hood for introspection purposes.","title":"delegateObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-single-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingSingleObserver AutoDisposingSingleObserver interface AutoDisposingSingleObserver T : Any : SingleObserver T , Disposable A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. Functions Name Summary delegateObserver abstract fun delegateObserver(): SingleObserver in T","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-single-observer/#autodisposingsingleobserver","text":"interface AutoDisposingSingleObserver T : Any : SingleObserver T , Disposable A Disposable SingleObserver that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"AutoDisposingSingleObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-single-observer/#functions","text":"Name Summary delegateObserver abstract fun delegateObserver(): SingleObserver in T","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-single-observer/delegate-observer/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingSingleObserver / delegateObserver delegateObserver abstract fun delegateObserver(): SingleObserver in T Return The delegate SingleObserver that is used under the hood for introspection purposes.","title":"Delegate observer"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-single-observer/delegate-observer/#delegateobserver","text":"abstract fun delegateObserver(): SingleObserver in T Return The delegate SingleObserver that is used under the hood for introspection purposes.","title":"delegateObserver"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-subscriber/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingSubscriber AutoDisposingSubscriber interface AutoDisposingSubscriber T : Any : FlowableSubscriber T , Subscription, Disposable A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation. Functions Name Summary delegateSubscriber abstract fun delegateSubscriber(): Subscriber in T","title":"Home"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-subscriber/#autodisposingsubscriber","text":"interface AutoDisposingSubscriber T : Any : FlowableSubscriber T , Subscription, Disposable A Disposable Subscriber that can automatically dispose itself. Interface here for type safety but enforcement is left to the implementation.","title":"AutoDisposingSubscriber"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-subscriber/#functions","text":"Name Summary delegateSubscriber abstract fun delegateSubscriber(): Subscriber in T","title":"Functions"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-subscriber/delegate-subscriber/","text":"autodispose / com.uber.autodispose.observers / AutoDisposingSubscriber / delegateSubscriber delegateSubscriber abstract fun delegateSubscriber(): Subscriber in T Return The delegate Subscriber that is used under the hood for introspection purposes.","title":"Delegate subscriber"},{"location":"1.x/autodispose/com.uber.autodispose.observers/-auto-disposing-subscriber/delegate-subscriber/#delegatesubscriber","text":"abstract fun delegateSubscriber(): Subscriber in T Return The delegate Subscriber that is used under the hood for introspection purposes.","title":"delegateSubscriber"},{"location":"1.x/autodispose-android/","text":"autodispose-android Android components for AutoDispose. Packages Name Summary com.uber.autodispose.android com.uber.autodispose.android.internal Index All Types","title":"Home"},{"location":"1.x/autodispose-android/#packages","text":"Name Summary com.uber.autodispose.android com.uber.autodispose.android.internal","title":"Packages"},{"location":"1.x/autodispose-android/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-android/alltypes/","text":"Android components for AutoDispose. All Types Name Summary com.uber.autodispose.android.AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. com.uber.autodispose.android.AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. com.uber.autodispose.android.internal.AutoDisposeAndroidUtil com.uber.autodispose.android.internal.AutoDisposeAndroidUtil io.reactivex.Completable (extensions in package com.uber.autodispose.android) io.reactivex.Flowable (extensions in package com.uber.autodispose.android) com.uber.autodispose.android.internal.MainThreadDisposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests). com.uber.autodispose.android.internal.MainThreadDisposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests). io.reactivex.Maybe (extensions in package com.uber.autodispose.android) io.reactivex.Observable (extensions in package com.uber.autodispose.android) io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose.android) io.reactivex.Single (extensions in package com.uber.autodispose.android) android.view.View (extensions in package com.uber.autodispose.android) com.uber.autodispose.android.ViewScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ` br ``` br | | [com.uber.autodispose.android.ViewScopeProvider](../com.uber.autodispose.android/-view-scope-provider/index.md) | A ScopeProvider that can provide scoping for Android View classes. br AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ``` |","title":"Home"},{"location":"1.x/autodispose-android/alltypes/#all-types","text":"Name Summary com.uber.autodispose.android.AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. com.uber.autodispose.android.AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. com.uber.autodispose.android.internal.AutoDisposeAndroidUtil com.uber.autodispose.android.internal.AutoDisposeAndroidUtil io.reactivex.Completable (extensions in package com.uber.autodispose.android) io.reactivex.Flowable (extensions in package com.uber.autodispose.android) com.uber.autodispose.android.internal.MainThreadDisposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests). com.uber.autodispose.android.internal.MainThreadDisposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests). io.reactivex.Maybe (extensions in package com.uber.autodispose.android) io.reactivex.Observable (extensions in package com.uber.autodispose.android) io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose.android) io.reactivex.Single (extensions in package com.uber.autodispose.android) android.view.View (extensions in package com.uber.autodispose.android) com.uber.autodispose.android.ViewScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ` br ``` br | | [com.uber.autodispose.android.ViewScopeProvider](../com.uber.autodispose.android/-view-scope-provider/index.md) | A ScopeProvider that can provide scoping for Android View classes. br AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ``` |","title":"All Types"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/","text":"autodispose-android / com.uber.autodispose.android Package com.uber.autodispose.android Types Name Summary AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. ViewScopeProvider class ViewScopeProvider : ScopeProvider class ViewScopeProvider : ScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ` br | Extensions for External Classes Name Summary android.view.View io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"autodispose-android"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/#package-comuberautodisposeandroid","text":"","title":"Package com.uber.autodispose.android"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/#types","text":"Name Summary AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations. ViewScopeProvider class ViewScopeProvider : ScopeProvider class ViewScopeProvider : ScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); ` br |","title":"Types"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/#extensions-for-external-classes","text":"Name Summary android.view.View io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"Extensions for External Classes"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations.","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/#autodisposeandroidplugins","text":"class AutoDisposeAndroidPlugins class AutoDisposeAndroidPlugins Utility class to inject handlers to certain standard AutoDispose Android operations.","title":"AutoDisposeAndroidPlugins"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/is-lockdown/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins / isLockdown isLockdown static fun isLockdown(): Boolean static fun isLockdown(): Boolean Returns true if the plugins were locked down. Return true if the plugins were locked down","title":"Is lockdown"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/is-lockdown/#islockdown","text":"static fun isLockdown(): Boolean static fun isLockdown(): Boolean Returns true if the plugins were locked down. Return true if the plugins were locked down","title":"isLockdown"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/lockdown/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins / lockdown lockdown static fun lockdown(): Unit static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins.","title":"Lockdown"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/lockdown/#lockdown","text":"static fun lockdown(): Unit static fun lockdown(): Unit Prevents changing the plugins from then on. This allows container-like environments to prevent client messing with plugins.","title":"lockdown"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/on-check-main-thread/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins / onCheckMainThread onCheckMainThread static fun onCheckMainThread(defaultChecker: BooleanSupplier ): Boolean static fun onCheckMainThread(defaultChecker: BooleanSupplier ): Boolean Returns true if called on the main thread, false if not. This will prefer a set checker via `[ #setOnCheckMainThread(BooleanSupplier) ](set-on-check-main-thread.md) if one is present, otherwise it will use defaultChecker`. Parameters defaultChecker - the default checker to fall back to if there is no main thread checker set. Return true if called on the main thread, false if not.","title":"On check main thread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/on-check-main-thread/#oncheckmainthread","text":"static fun onCheckMainThread(defaultChecker: BooleanSupplier ): Boolean static fun onCheckMainThread(defaultChecker: BooleanSupplier ): Boolean Returns true if called on the main thread, false if not. This will prefer a set checker via `[ #setOnCheckMainThread(BooleanSupplier) ](set-on-check-main-thread.md) if one is present, otherwise it will use defaultChecker`.","title":"onCheckMainThread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/on-check-main-thread/#parameters","text":"defaultChecker - the default checker to fall back to if there is no main thread checker set. Return true if called on the main thread, false if not.","title":"Parameters"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/reset/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins / reset reset static fun reset(): Unit static fun reset(): Unit Removes all handlers and resets to default behavior.","title":"Reset"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/reset/#reset","text":"static fun reset(): Unit static fun reset(): Unit Removes all handlers and resets to default behavior.","title":"reset"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/set-on-check-main-thread/","text":"autodispose-android / com.uber.autodispose.android / AutoDisposeAndroidPlugins / setOnCheckMainThread setOnCheckMainThread static fun setOnCheckMainThread(@Nullable mainThreadChecker: BooleanSupplier ): Unit static fun setOnCheckMainThread(@Nullable mainThreadChecker: BooleanSupplier ): Unit Sets the preferred main thread checker. If not null , the mainThreadChecker will be preferred in all main thread checks in `[ #onCheckMainThread(BooleanSupplier)`](on-check-main-thread.md) calls. This can be useful for JVM testing environments, where standard Android Looper APIs cannot be stubbed and thus should be overridden with a custom check. This is a reset-able API, which means you can pass null as the parameter value to reset it. Alternatively, you can call `[ #reset()`](reset.md). Parameters mainThreadChecker - a BooleanSupplier to call to check if current execution is on the main thread. Should return true if it is on the main thread or false if not.","title":"Set on check main thread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/set-on-check-main-thread/#setoncheckmainthread","text":"static fun setOnCheckMainThread(@Nullable mainThreadChecker: BooleanSupplier ): Unit static fun setOnCheckMainThread(@Nullable mainThreadChecker: BooleanSupplier ): Unit Sets the preferred main thread checker. If not null , the mainThreadChecker will be preferred in all main thread checks in `[ #onCheckMainThread(BooleanSupplier)`](on-check-main-thread.md) calls. This can be useful for JVM testing environments, where standard Android Looper APIs cannot be stubbed and thus should be overridden with a custom check. This is a reset-able API, which means you can pass null as the parameter value to reset it. Alternatively, you can call `[ #reset()`](reset.md).","title":"setOnCheckMainThread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-auto-dispose-android-plugins/set-on-check-main-thread/#parameters","text":"mainThreadChecker - a BooleanSupplier to call to check if current execution is on the main thread. Should return true if it is on the main thread or false if not.","title":"Parameters"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/","text":"autodispose-android / com.uber.autodispose.android / ViewScopeProvider ViewScopeProvider class ViewScopeProvider : ScopeProvider class ViewScopeProvider : ScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); `","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/#viewscopeprovider","text":"class ViewScopeProvider : ScopeProvider class ViewScopeProvider : ScopeProvider A ScopeProvider that can provide scoping for Android View classes. ` AutoDispose.autoDisposable(ViewScopeProvider.from(view)); `","title":"ViewScopeProvider"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/from/","text":"autodispose-android / com.uber.autodispose.android / ViewScopeProvider / from from static fun from(view: View ): ScopeProvider static fun from(view: View ): ScopeProvider Creates a ScopeProvider for Android Views. Parameters view - the view to scope for Return a ScopeProvider against this view.","title":"From"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/from/#from","text":"static fun from(view: View ): ScopeProvider static fun from(view: View ): ScopeProvider Creates a ScopeProvider for Android Views.","title":"from"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/from/#parameters","text":"view - the view to scope for Return a ScopeProvider against this view.","title":"Parameters"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/request-scope/","text":"autodispose-android / com.uber.autodispose.android / ViewScopeProvider / requestScope requestScope fun requestScope(): CompletableSource fun requestScope(): CompletableSource","title":"Request scope"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/-view-scope-provider/request-scope/#requestscope","text":"fun requestScope(): CompletableSource fun requestScope(): CompletableSource","title":"requestScope"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/android.view.-view/","text":"autodispose-android / com.uber.autodispose.android / android.view.View Extensions for android.view.View Name Summary scope fun View .scope(): ScopeProvider Extension that returns a ScopeProvider for this View .","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/android.view.-view/#extensions-for-androidviewview","text":"Name Summary scope fun View .scope(): ScopeProvider Extension that returns a ScopeProvider for this View .","title":"Extensions for android.view.View"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/android.view.-view/scope/","text":"autodispose-android / com.uber.autodispose.android / android.view.View / scope scope @CheckReturnValue inline fun View .scope(): ScopeProvider Extension that returns a ScopeProvider for this View .","title":"Scope"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/android.view.-view/scope/#scope","text":"@CheckReturnValue inline fun View .scope(): ScopeProvider Extension that returns a ScopeProvider for this View .","title":"scope"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-completable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary autoDisposable fun Completable .autoDisposable(view: View ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary autoDisposable fun Completable .autoDisposable(view: View ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Completable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-completable/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Completable / autoDisposable autoDisposable @CheckReturnValue inline fun Completable .autoDisposable(view: View ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-completable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun Completable .autoDisposable(view: View ): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-flowable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary autoDisposable fun T Flowable T .autoDisposable(view: View ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary autoDisposable fun T Flowable T .autoDisposable(view: View ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Flowable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-flowable/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Flowable / autoDisposable autoDisposable @CheckReturnValue inline fun T Flowable T .autoDisposable(view: View ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Flowable T .autoDisposable(view: View ): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-maybe/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary autoDisposable fun T Maybe T .autoDisposable(view: View ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary autoDisposable fun T Maybe T .autoDisposable(view: View ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Maybe"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-maybe/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Maybe / autoDisposable autoDisposable @CheckReturnValue inline fun T Maybe T .autoDisposable(view: View ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-maybe/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Maybe T .autoDisposable(view: View ): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-observable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary autoDisposable fun T Observable T .autoDisposable(view: View ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary autoDisposable fun T Observable T .autoDisposable(view: View ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-observable/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Observable / autoDisposable autoDisposable @CheckReturnValue inline fun T Observable T .autoDisposable(view: View ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-observable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Observable T .autoDisposable(view: View ): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-single/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Single Extensions for io.reactivex.Single Name Summary autoDisposable fun T Single T .autoDisposable(view: View ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary autoDisposable fun T Single T .autoDisposable(view: View ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.Single"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-single/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.Single / autoDisposable autoDisposable @CheckReturnValue inline fun T Single T .autoDisposable(view: View ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.-single/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Single T .autoDisposable(view: View ): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.parallel.-parallel-flowable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.parallel.ParallelFlowable Extensions for io.reactivex.parallel.ParallelFlowable Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(view: View ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.parallel.-parallel-flowable/#extensions-for-ioreactivexparallelparallelflowable","text":"Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(view: View ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Extensions for io.reactivex.parallel.ParallelFlowable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.parallel.-parallel-flowable/auto-disposable/","text":"autodispose-android / com.uber.autodispose.android / io.reactivex.parallel.ParallelFlowable / autoDisposable autoDisposable @CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(view: View ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"Auto disposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android/io.reactivex.parallel.-parallel-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(view: View ): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable","title":"autoDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/","text":"autodispose-android / com.uber.autodispose.android.internal Package com.uber.autodispose.android.internal Types Name Summary AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil MainThreadDisposable abstract class MainThreadDisposable : Disposable abstract class MainThreadDisposable : Disposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/#package-comuberautodisposeandroidinternal","text":"","title":"Package com.uber.autodispose.android.internal"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/#types","text":"Name Summary AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil MainThreadDisposable abstract class MainThreadDisposable : Disposable abstract class MainThreadDisposable : Disposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":"Types"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-auto-dispose-android-util/","text":"autodispose-android / com.uber.autodispose.android.internal / AutoDisposeAndroidUtil AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-auto-dispose-android-util/#autodisposeandroidutil","text":"open class AutoDisposeAndroidUtil open class AutoDisposeAndroidUtil","title":"AutoDisposeAndroidUtil"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread/","text":"autodispose-android / com.uber.autodispose.android.internal / AutoDisposeAndroidUtil / isMainThread isMainThread open static fun isMainThread(): Boolean open static fun isMainThread(): Boolean","title":"Is main thread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-auto-dispose-android-util/is-main-thread/#ismainthread","text":"open static fun isMainThread(): Boolean open static fun isMainThread(): Boolean","title":"isMainThread"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/","text":"autodispose-android / com.uber.autodispose.android.internal / MainThreadDisposable MainThreadDisposable abstract class MainThreadDisposable : Disposable abstract class MainThreadDisposable : Disposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":"Home"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/#mainthreaddisposable","text":"abstract class MainThreadDisposable : Disposable abstract class MainThreadDisposable : Disposable Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":"MainThreadDisposable"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/-init-/","text":"autodispose-android / com.uber.autodispose.android.internal / MainThreadDisposable / init init MainThreadDisposable() MainThreadDisposable() Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":" init "},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/-init-/#init","text":"MainThreadDisposable() MainThreadDisposable() Copy of the MainThreadDisposable from RxAndroid which makes use of `[ `](../-auto-dispose-android-util/is-main-thread.md). This allows disposing on the JVM without crashing due to the looper check (which is often stubbed in tests).","title":"&lt;init&gt;"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/dispose/","text":"autodispose-android / com.uber.autodispose.android.internal / MainThreadDisposable / dispose dispose fun dispose(): Unit fun dispose(): Unit","title":"Dispose"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/dispose/#dispose","text":"fun dispose(): Unit fun dispose(): Unit","title":"dispose"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/is-disposed/","text":"autodispose-android / com.uber.autodispose.android.internal / MainThreadDisposable / isDisposed isDisposed fun isDisposed(): Boolean fun isDisposed(): Boolean","title":"Is disposed"},{"location":"1.x/autodispose-android/com.uber.autodispose.android.internal/-main-thread-disposable/is-disposed/#isdisposed","text":"fun isDisposed(): Boolean fun isDisposed(): Boolean","title":"isDisposed"},{"location":"1.x/autodispose-android-archcomponents/","text":"autodispose-android-archcomponents Android Architecture Components extensions for AutoDispose. Packages Name Summary com.uber.autodispose.android.lifecycle Index All Types","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/#packages","text":"Name Summary com.uber.autodispose.android.lifecycle","title":"Packages"},{"location":"1.x/autodispose-android-archcomponents/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-android-archcomponents/alltypes/","text":"Android Architecture Components extensions for AutoDispose. All Types Name Summary com.uber.autodispose.android.lifecycle.AndroidLifecycleScopeProvider A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ` br ``` br | | [com.uber.autodispose.android.lifecycle.AndroidLifecycleScopeProvider](../com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/index.md) | A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. br AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ``` | | io.reactivex.Completable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Flowable (extensions in package com.uber.autodispose.android.lifecycle) | | | androidx.lifecycle.Lifecycle (extensions in package com.uber.autodispose.android.lifecycle) | | | androidx.lifecycle.LifecycleOwner (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Maybe (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Observable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Single (extensions in package com.uber.autodispose.android.lifecycle) | |","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/alltypes/#all-types","text":"Name Summary com.uber.autodispose.android.lifecycle.AndroidLifecycleScopeProvider A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ` br ``` br | | [com.uber.autodispose.android.lifecycle.AndroidLifecycleScopeProvider](../com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/index.md) | A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. br AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ``` | | io.reactivex.Completable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Flowable (extensions in package com.uber.autodispose.android.lifecycle) | | | androidx.lifecycle.Lifecycle (extensions in package com.uber.autodispose.android.lifecycle) | | | androidx.lifecycle.LifecycleOwner (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Maybe (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Observable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.parallel.ParallelFlowable (extensions in package com.uber.autodispose.android.lifecycle) | | | io.reactivex.Single (extensions in package com.uber.autodispose.android.lifecycle) | |","title":"All Types"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle Package com.uber.autodispose.android.lifecycle Types Name Summary AndroidLifecycleScopeProvider class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ` br | Extensions for External Classes Name Summary androidx.lifecycle.Lifecycle androidx.lifecycle.LifecycleOwner io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"autodispose-android-archcomponent"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/#package-comuberautodisposeandroidlifecycle","text":"","title":"Package com.uber.autodispose.android.lifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/#types","text":"Name Summary AndroidLifecycleScopeProvider class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) ` br |","title":"Types"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/#extensions-for-external-classes","text":"Name Summary androidx.lifecycle.Lifecycle androidx.lifecycle.LifecycleOwner io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"Extensions for External Classes"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider AndroidLifecycleScopeProvider class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) `","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/#androidlifecyclescopeprovider","text":"class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event class AndroidLifecycleScopeProvider : LifecycleScopeProvider Event A LifecycleScopeProvider that can provide scoping for Android Lifecycle and LifecycleOwner classes. ` AutoDispose.autoDisposable(AndroidLifecycleScopeProvider.from(lifecycleOwner)) `","title":"AndroidLifecycleScopeProvider"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/corresponding-events/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider / correspondingEvents correspondingEvents fun correspondingEvents(): CorrespondingEventsFunction Event fun correspondingEvents(): CorrespondingEventsFunction Event","title":"Corresponding events"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/corresponding-events/#correspondingevents","text":"fun correspondingEvents(): CorrespondingEventsFunction Event fun correspondingEvents(): CorrespondingEventsFunction Event","title":"correspondingEvents"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider / from from static fun from(owner: LifecycleOwner): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android LifecycleOwners. Parameters owner - the owner to scope for. Return a AndroidLifecycleScopeProvider against this owner. static fun from(owner: LifecycleOwner, untilEvent: Event): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner, untilEvent: Event): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android LifecycleOwners. Parameters owner - the owner to scope for. untilEvent - the event until the scope is valid. Return a AndroidLifecycleScopeProvider against this owner. static fun from(lifecycle: Lifecycle): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles. Parameters lifecycle - the lifecycle to scope for. Return a AndroidLifecycleScopeProvider against this lifecycle. static fun from(lifecycle: Lifecycle, untilEvent: Event): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle, untilEvent: Event): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles. Parameters lifecycle - the lifecycle to scope for. untilEvent - the event until the scope is valid. Return a AndroidLifecycleScopeProvider against this lifecycle. static fun from(owner: LifecycleOwner, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles. Parameters owner - the owner to scope for. boundaryResolver - function that resolves the event boundary. Return a AndroidLifecycleScopeProvider against this owner. static fun from(lifecycle: Lifecycle, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles. Parameters lifecycle - the lifecycle to scope for. boundaryResolver - function that resolves the event boundary. Return a AndroidLifecycleScopeProvider against this lifecycle.","title":"From"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#from","text":"static fun from(owner: LifecycleOwner): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android LifecycleOwners.","title":"from"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters","text":"owner - the owner to scope for. Return a AndroidLifecycleScopeProvider against this owner. static fun from(owner: LifecycleOwner, untilEvent: Event): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner, untilEvent: Event): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android LifecycleOwners.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters_1","text":"owner - the owner to scope for. untilEvent - the event until the scope is valid. Return a AndroidLifecycleScopeProvider against this owner. static fun from(lifecycle: Lifecycle): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters_2","text":"lifecycle - the lifecycle to scope for. Return a AndroidLifecycleScopeProvider against this lifecycle. static fun from(lifecycle: Lifecycle, untilEvent: Event): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle, untilEvent: Event): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters_3","text":"lifecycle - the lifecycle to scope for. untilEvent - the event until the scope is valid. Return a AndroidLifecycleScopeProvider against this lifecycle. static fun from(owner: LifecycleOwner, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider static fun from(owner: LifecycleOwner, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters_4","text":"owner - the owner to scope for. boundaryResolver - function that resolves the event boundary. Return a AndroidLifecycleScopeProvider against this owner. static fun from(lifecycle: Lifecycle, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider static fun from(lifecycle: Lifecycle, boundaryResolver: CorrespondingEventsFunction Event ): AndroidLifecycleScopeProvider Creates a AndroidLifecycleScopeProvider for Android Lifecycles.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/from/#parameters_5","text":"lifecycle - the lifecycle to scope for. boundaryResolver - function that resolves the event boundary. Return a AndroidLifecycleScopeProvider against this lifecycle.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/lifecycle/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider / lifecycle lifecycle fun lifecycle(): Observable Event fun lifecycle(): Observable Event","title":"Lifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/lifecycle/#lifecycle","text":"fun lifecycle(): Observable Event fun lifecycle(): Observable Event","title":"lifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/peek-lifecycle/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider / peekLifecycle peekLifecycle fun peekLifecycle(): Event? fun peekLifecycle(): Event?","title":"Peek lifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/peek-lifecycle/#peeklifecycle","text":"fun peekLifecycle(): Event? fun peekLifecycle(): Event?","title":"peekLifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/request-scope/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / AndroidLifecycleScopeProvider / requestScope requestScope fun requestScope(): CompletableSource fun requestScope(): CompletableSource","title":"Request scope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/-android-lifecycle-scope-provider/request-scope/#requestscope","text":"fun requestScope(): CompletableSource fun requestScope(): CompletableSource","title":"requestScope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / androidx.lifecycle.Lifecycle Extensions for androidx.lifecycle.Lifecycle Name Summary scope fun Lifecycle.scope(): ScopeProvider fun Lifecycle.scope(untilEvent: Event): ScopeProvider fun Lifecycle.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle .","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/#extensions-for-androidxlifecyclelifecycle","text":"Name Summary scope fun Lifecycle.scope(): ScopeProvider fun Lifecycle.scope(untilEvent: Event): ScopeProvider fun Lifecycle.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle .","title":"Extensions for androidx.lifecycle.Lifecycle"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/scope/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / androidx.lifecycle.Lifecycle / scope scope @CheckReturnValue inline fun Lifecycle.scope(): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle . @CheckReturnValue inline fun Lifecycle.scope(untilEvent: Event): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle . Parameters untilEvent - the event until the scope is valid. @CheckReturnValue inline fun Lifecycle.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle . Parameters boundaryResolver - function that resolves the event boundary.","title":"Scope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/scope/#scope","text":"@CheckReturnValue inline fun Lifecycle.scope(): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle . @CheckReturnValue inline fun Lifecycle.scope(untilEvent: Event): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle .","title":"scope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/scope/#parameters","text":"untilEvent - the event until the scope is valid. @CheckReturnValue inline fun Lifecycle.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this Lifecycle .","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle/scope/#parameters_1","text":"boundaryResolver - function that resolves the event boundary.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / androidx.lifecycle.LifecycleOwner Extensions for androidx.lifecycle.LifecycleOwner Name Summary scope fun LifecycleOwner.scope(): ScopeProvider fun LifecycleOwner.scope(untilEvent: Event): ScopeProvider fun LifecycleOwner.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner .","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/#extensions-for-androidxlifecyclelifecycleowner","text":"Name Summary scope fun LifecycleOwner.scope(): ScopeProvider fun LifecycleOwner.scope(untilEvent: Event): ScopeProvider fun LifecycleOwner.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner .","title":"Extensions for androidx.lifecycle.LifecycleOwner"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/scope/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / androidx.lifecycle.LifecycleOwner / scope scope @CheckReturnValue inline fun LifecycleOwner.scope(): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner . @CheckReturnValue inline fun LifecycleOwner.scope(untilEvent: Event): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner . Parameters untilEvent - the event until the scope is valid. @CheckReturnValue inline fun LifecycleOwner.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner . Parameters boundaryResolver - function that resolves the event boundary.","title":"Scope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/scope/#scope","text":"@CheckReturnValue inline fun LifecycleOwner.scope(): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner . @CheckReturnValue inline fun LifecycleOwner.scope(untilEvent: Event): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner .","title":"scope"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/scope/#parameters","text":"untilEvent - the event until the scope is valid. @CheckReturnValue inline fun LifecycleOwner.scope(boundaryResolver: CorrespondingEventsFunction Event ): ScopeProvider Extension that returns a ScopeProvider for this LifecycleOwner .","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/androidx.lifecycle.-lifecycle-owner/scope/#parameters_1","text":"boundaryResolver - function that resolves the event boundary.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-completable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary autoDisposable fun Completable .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary autoDisposable fun Completable .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.Completable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-completable/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Completable / autoDisposable autoDisposable @CheckReturnValue inline fun Completable .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-completable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun Completable .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-completable/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-flowable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary autoDisposable fun T Flowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary autoDisposable fun T Flowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.Flowable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-flowable/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Flowable / autoDisposable autoDisposable @CheckReturnValue inline fun T Flowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Flowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-flowable/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-maybe/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary autoDisposable fun T Maybe T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary autoDisposable fun T Maybe T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.Maybe"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-maybe/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Maybe / autoDisposable autoDisposable @CheckReturnValue inline fun T Maybe T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-maybe/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Maybe T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-maybe/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-observable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary autoDisposable fun T Observable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary autoDisposable fun T Observable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-observable/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Observable / autoDisposable autoDisposable @CheckReturnValue inline fun T Observable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-observable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Observable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-observable/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-single/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Single Extensions for io.reactivex.Single Name Summary autoDisposable fun T Single T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary autoDisposable fun T Single T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.Single"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-single/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.Single / autoDisposable autoDisposable @CheckReturnValue inline fun T Single T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-single/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T Single T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.-single/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.parallel.-parallel-flowable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.parallel.ParallelFlowable Extensions for io.reactivex.parallel.ParallelFlowable Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.parallel.-parallel-flowable/#extensions-for-ioreactivexparallelparallelflowable","text":"Name Summary autoDisposable fun T ParallelFlowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"Extensions for io.reactivex.parallel.ParallelFlowable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/","text":"autodispose-android-archcomponents / com.uber.autodispose.android.lifecycle / io.reactivex.parallel.ParallelFlowable / autoDisposable autoDisposable @CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed. Parameters lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T ParallelFlowable T .autoDisposable(lifecycleOwner: LifecycleOwner, untilEvent: Event? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an untilEvent when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-android-archcomponents/com.uber.autodispose.android.lifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/#parameters","text":"lifecycleOwner - The lifecycle owner. untilEvent - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents-test/","text":"autodispose-android-archcomponents-test Test helpers for autodispose-android-archcomponents support. Packages Name Summary com.uber.autodispose.android.lifecycle.test Index All Types","title":"Home"},{"location":"1.x/autodispose-android-archcomponents-test/#packages","text":"Name Summary com.uber.autodispose.android.lifecycle.test","title":"Packages"},{"location":"1.x/autodispose-android-archcomponents-test/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-android-archcomponents-test/alltypes/","text":"Test helpers for autodispose-android-archcomponents support. All Types Name Summary androidx.lifecycle.LifecycleRegistry (extensions in package com.uber.autodispose.android.lifecycle.test) com.uber.autodispose.android.lifecycle.test.TestLifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API. com.uber.autodispose.android.lifecycle.test.TestLifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents-test/alltypes/#all-types","text":"Name Summary androidx.lifecycle.LifecycleRegistry (extensions in package com.uber.autodispose.android.lifecycle.test) com.uber.autodispose.android.lifecycle.test.TestLifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API. com.uber.autodispose.android.lifecycle.test.TestLifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API.","title":"All Types"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test Package com.uber.autodispose.android.lifecycle.test Types Name Summary TestLifecycleOwner class TestLifecycleOwner : LifecycleOwner class TestLifecycleOwner : LifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API. Extensions for External Classes Name Summary androidx.lifecycle.LifecycleRegistry","title":"autodispose-android-archcomponent-test"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/#package-comuberautodisposeandroidlifecycletest","text":"","title":"Package com.uber.autodispose.android.lifecycle.test"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/#types","text":"Name Summary TestLifecycleOwner class TestLifecycleOwner : LifecycleOwner class TestLifecycleOwner : LifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API.","title":"Types"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/#extensions-for-external-classes","text":"Name Summary androidx.lifecycle.LifecycleRegistry","title":"Extensions for External Classes"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / TestLifecycleOwner TestLifecycleOwner class TestLifecycleOwner : LifecycleOwner class TestLifecycleOwner : LifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API.","title":"Home"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/#testlifecycleowner","text":"class TestLifecycleOwner : LifecycleOwner class TestLifecycleOwner : LifecycleOwner A test LifecycleOwner implementation for testing. You can either back it with your own instance or just stub it in place and use its public emit() API.","title":"TestLifecycleOwner"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/create/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / TestLifecycleOwner / create create static fun create(): TestLifecycleOwner static fun create(): TestLifecycleOwner Default creator. Creates and maintains its own LifecycleRegistry under the hood. static fun create(registry: LifecycleRegistry): TestLifecycleOwner static fun create(registry: LifecycleRegistry): TestLifecycleOwner Parameters registry - an optional custom LifecycleRegistry if you want to provide one. If null , a default implementation will be created and maintained under the hood.","title":"Create"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/create/#create","text":"static fun create(): TestLifecycleOwner static fun create(): TestLifecycleOwner Default creator. Creates and maintains its own LifecycleRegistry under the hood. static fun create(registry: LifecycleRegistry): TestLifecycleOwner static fun create(registry: LifecycleRegistry): TestLifecycleOwner","title":"create"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/create/#parameters","text":"registry - an optional custom LifecycleRegistry if you want to provide one. If null , a default implementation will be created and maintained under the hood.","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/emit/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / TestLifecycleOwner / emit emit fun emit(event: Event): Unit fun emit(event: Event): Unit Simulates the emission of a given lifecycle event , marking state as necessary to the internal LifecycleRegistry as well as needed. Parameters event - the event to simulate","title":"Emit"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/emit/#emit","text":"fun emit(event: Event): Unit fun emit(event: Event): Unit Simulates the emission of a given lifecycle event , marking state as necessary to the internal LifecycleRegistry as well as needed.","title":"emit"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/emit/#parameters","text":"event - the event to simulate","title":"Parameters"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/get-lifecycle/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / TestLifecycleOwner / getLifecycle getLifecycle fun getLifecycle(): LifecycleRegistry fun getLifecycle(): LifecycleRegistry","title":"Get lifecycle"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/-test-lifecycle-owner/get-lifecycle/#getlifecycle","text":"fun getLifecycle(): LifecycleRegistry fun getLifecycle(): LifecycleRegistry","title":"getLifecycle"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/androidx.lifecycle.-lifecycle-registry/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / androidx.lifecycle.LifecycleRegistry Extensions for androidx.lifecycle.LifecycleRegistry Name Summary test fun LifecycleRegistry.test(): TestLifecycleOwner Extension that returns a TestLifecycleOwner for this LifecycleRegistry .","title":"Home"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/androidx.lifecycle.-lifecycle-registry/#extensions-for-androidxlifecyclelifecycleregistry","text":"Name Summary test fun LifecycleRegistry.test(): TestLifecycleOwner Extension that returns a TestLifecycleOwner for this LifecycleRegistry .","title":"Extensions for androidx.lifecycle.LifecycleRegistry"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/androidx.lifecycle.-lifecycle-registry/test/","text":"autodispose-android-archcomponents-test / com.uber.autodispose.android.lifecycle.test / androidx.lifecycle.LifecycleRegistry / test test @CheckReturnValue inline fun LifecycleRegistry.test(): TestLifecycleOwner Extension that returns a TestLifecycleOwner for this LifecycleRegistry .","title":"Test"},{"location":"1.x/autodispose-android-archcomponents-test/com.uber.autodispose.android.lifecycle.test/androidx.lifecycle.-lifecycle-registry/test/#test","text":"@CheckReturnValue inline fun LifecycleRegistry.test(): TestLifecycleOwner Extension that returns a TestLifecycleOwner for this LifecycleRegistry .","title":"test"},{"location":"1.x/autodispose-lifecycle/","text":"autodispose-lifecycle public interface LifecycleScopeProvider E extends ScopeProvider { Observable E lifecycle(); Function E, E correspondingEvents(); E peekLifecycle(); // Inherited from ScopeProvider CompletableSource requestScope(); } A common use case for this is objects that have implicit lifecycles, such as Android s Activity , Fragment , and View classes. Internally at subscription-time, AutoDispose will resolve a CompletableSource representation of the target end event in the lifecycle, and exposes an API to dictate what corresponding events are for the current lifecycle state (e.g. ATTACH - DETACH ). This also allows you to enforce lifecycle boundary requirements, and by default will error if the lifecycle has either not started yet or has already ended. LifecycleScopeProvider is a special case targeted at binding to things with lifecycles. Its API is as follows: lifecycle() - returns an Observable of lifecycle events. This should be backed by a BehaviorSubject or something similar ( BehaviorRelay , etc). correspondingEvents() - a mapping of events to corresponding ones, i.e. Attach - Detach. peekLifecycle() - returns the current lifecycle state of the object. In requestScope() , the implementation expects to these pieces to construct a CompletableSource representation of the proper end scope, while also doing precondition checks for lifecycle boundaries. If a lifecycle has not started, it will send you to onError with a LifecycleNotStartedException . If the lifecycle as ended, it is recommended to throw a LifecycleEndedException in your correspondingEvents() mapping, but it is up to the user. To simplify implementations, there s an included LifecycleScopes utility class with factories for generating CompletableSource representations from LifecycleScopeProvider instances. Packages Name Summary com.uber.autodispose.lifecycle Index All Types","title":"Home"},{"location":"1.x/autodispose-lifecycle/#packages","text":"Name Summary com.uber.autodispose.lifecycle","title":"Packages"},{"location":"1.x/autodispose-lifecycle/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-lifecycle/alltypes/","text":"public interface LifecycleScopeProvider E extends ScopeProvider { Observable E lifecycle(); Function E, E correspondingEvents(); E peekLifecycle(); // Inherited from ScopeProvider CompletableSource requestScope(); } All Types Name Summary com.uber.autodispose.lifecycle.CorrespondingEventsFunction A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException. com.uber.autodispose.lifecycle.LifecycleEndedException Signifies an error occurred due to execution starting after the lifecycle has ended. com.uber.autodispose.lifecycle.LifecycleNotStartedException Signifies an error occurred due to execution starting before the lifecycle has started. com.uber.autodispose.lifecycle.LifecycleScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](../com.uber.autodispose.lifecycle/-lifecycle-scope-provider/lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes. com.uber.autodispose.lifecycle.LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc. com.uber.autodispose.lifecycle.TestLifecycleScopeProvider Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"Home"},{"location":"1.x/autodispose-lifecycle/alltypes/#all-types","text":"Name Summary com.uber.autodispose.lifecycle.CorrespondingEventsFunction A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException. com.uber.autodispose.lifecycle.LifecycleEndedException Signifies an error occurred due to execution starting after the lifecycle has ended. com.uber.autodispose.lifecycle.LifecycleNotStartedException Signifies an error occurred due to execution starting before the lifecycle has started. com.uber.autodispose.lifecycle.LifecycleScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](../com.uber.autodispose.lifecycle/-lifecycle-scope-provider/lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes. com.uber.autodispose.lifecycle.LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc. com.uber.autodispose.lifecycle.TestLifecycleScopeProvider Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"All Types"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle Package com.uber.autodispose.lifecycle Types Name Summary CorrespondingEventsFunction interface CorrespondingEventsFunction E : Any : Function E , E A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException. LifecycleScopeProvider interface LifecycleScopeProvider E : Any : ScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](-lifecycle-scope-provider/lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes. LifecycleScopes class LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc. TestLifecycleScopeProvider class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException. Exceptions Name Summary LifecycleEndedException open class LifecycleEndedException : OutsideScopeException Signifies an error occurred due to execution starting after the lifecycle has ended. LifecycleNotStartedException open class LifecycleNotStartedException : OutsideScopeException Signifies an error occurred due to execution starting before the lifecycle has started.","title":"autodispose-lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/#package-comuberautodisposelifecycle","text":"","title":"Package com.uber.autodispose.lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/#types","text":"Name Summary CorrespondingEventsFunction interface CorrespondingEventsFunction E : Any : Function E , E A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException. LifecycleScopeProvider interface LifecycleScopeProvider E : Any : ScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](-lifecycle-scope-provider/lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes. LifecycleScopes class LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc. TestLifecycleScopeProvider class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"Types"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/#exceptions","text":"Name Summary LifecycleEndedException open class LifecycleEndedException : OutsideScopeException Signifies an error occurred due to execution starting after the lifecycle has ended. LifecycleNotStartedException open class LifecycleNotStartedException : OutsideScopeException Signifies an error occurred due to execution starting before the lifecycle has started.","title":"Exceptions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / CorrespondingEventsFunction CorrespondingEventsFunction interface CorrespondingEventsFunction E : Any : Function E , E A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException. Parameters E - the event type. Functions Name Summary apply abstract fun apply(event: E ): E Given an event event , returns the next corresponding event that this lifecycle should dispose on.","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/#correspondingeventsfunction","text":"interface CorrespondingEventsFunction E : Any : Function E , E A corresponding events function that acts as a normal Function but ensures a single event type in the generic and tightens the possible exception thrown to OutsideScopeException.","title":"CorrespondingEventsFunction"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/#parameters","text":"E - the event type.","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/#functions","text":"Name Summary apply abstract fun apply(event: E ): E Given an event event , returns the next corresponding event that this lifecycle should dispose on.","title":"Functions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/apply/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / CorrespondingEventsFunction / apply apply abstract fun apply(event: E ): E Given an event event , returns the next corresponding event that this lifecycle should dispose on. Parameters event - the source or start event. Exceptions OutsideScopeException - if the lifecycle exceeds its scope boundaries. Return the target event that should signal disposal.","title":"Apply"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/apply/#apply","text":"abstract fun apply(event: E ): E Given an event event , returns the next corresponding event that this lifecycle should dispose on.","title":"apply"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/apply/#parameters","text":"event - the source or start event.","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-corresponding-events-function/apply/#exceptions","text":"OutsideScopeException - if the lifecycle exceeds its scope boundaries. Return the target event that should signal disposal.","title":"Exceptions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-ended-exception/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleEndedException LifecycleEndedException open class LifecycleEndedException : OutsideScopeException Signifies an error occurred due to execution starting after the lifecycle has ended. Constructors Name Summary init LifecycleEndedException() LifecycleEndedException(s: String )","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-ended-exception/#lifecycleendedexception","text":"open class LifecycleEndedException : OutsideScopeException Signifies an error occurred due to execution starting after the lifecycle has ended.","title":"LifecycleEndedException"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-ended-exception/#constructors","text":"Name Summary init LifecycleEndedException() LifecycleEndedException(s: String )","title":"Constructors"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-ended-exception/-init-/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleEndedException / init init LifecycleEndedException() LifecycleEndedException(s: String )","title":" init "},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-ended-exception/-init-/#init","text":"LifecycleEndedException() LifecycleEndedException(s: String )","title":"&lt;init&gt;"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-not-started-exception/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleNotStartedException LifecycleNotStartedException open class LifecycleNotStartedException : OutsideScopeException Signifies an error occurred due to execution starting before the lifecycle has started. Constructors Name Summary init LifecycleNotStartedException() LifecycleNotStartedException(s: String )","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-not-started-exception/#lifecyclenotstartedexception","text":"open class LifecycleNotStartedException : OutsideScopeException Signifies an error occurred due to execution starting before the lifecycle has started.","title":"LifecycleNotStartedException"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-not-started-exception/#constructors","text":"Name Summary init LifecycleNotStartedException() LifecycleNotStartedException(s: String )","title":"Constructors"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-not-started-exception/-init-/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleNotStartedException / init init LifecycleNotStartedException() LifecycleNotStartedException(s: String )","title":" init "},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-not-started-exception/-init-/#init","text":"LifecycleNotStartedException() LifecycleNotStartedException(s: String )","title":"&lt;init&gt;"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopeProvider LifecycleScopeProvider @DoNotMock(\"Use TestLifecycleScopeProvider instead\") interface LifecycleScopeProvider E : Any : ScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes. Parameters E - the lifecycle event type. See Also LifecycleScopes Functions Name Summary correspondingEvents abstract fun correspondingEvents(): CorrespondingEventsFunction E lifecycle abstract fun lifecycle(): Observable E peekLifecycle abstract fun peekLifecycle(): E ? requestScope open fun requestScope(): CompletableSource Inheritors Name Summary TestLifecycleScopeProvider class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/#lifecyclescopeprovider","text":"@DoNotMock(\"Use TestLifecycleScopeProvider instead\") interface LifecycleScopeProvider E : Any : ScopeProvider A convenience interface that, when implemented, helps provide information to create implementations that resolve the next corresponding lifecycle event and construct a Completable representation of it from the `[ #lifecycle()`](lifecycle.md) stream. Convenience resolver utilities for this can be found in LifecycleScopes.","title":"LifecycleScopeProvider"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/#parameters","text":"E - the lifecycle event type. See Also LifecycleScopes","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/#functions","text":"Name Summary correspondingEvents abstract fun correspondingEvents(): CorrespondingEventsFunction E lifecycle abstract fun lifecycle(): Observable E peekLifecycle abstract fun peekLifecycle(): E ? requestScope open fun requestScope(): CompletableSource","title":"Functions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/#inheritors","text":"Name Summary TestLifecycleScopeProvider class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"Inheritors"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/corresponding-events/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopeProvider / correspondingEvents correspondingEvents @CheckReturnValue abstract fun correspondingEvents(): CorrespondingEventsFunction E Return a sequence of lifecycle events. It s recommended to back this with a static instance to avoid unnecessary object allocation.","title":"Corresponding events"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/corresponding-events/#correspondingevents","text":"@CheckReturnValue abstract fun correspondingEvents(): CorrespondingEventsFunction E Return a sequence of lifecycle events. It s recommended to back this with a static instance to avoid unnecessary object allocation.","title":"correspondingEvents"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopeProvider / lifecycle lifecycle @CheckReturnValue abstract fun lifecycle(): Observable E Return a sequence of lifecycle events. Note that completion of this lifecycle will also trigger disposal","title":"Lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/lifecycle/#lifecycle","text":"@CheckReturnValue abstract fun lifecycle(): Observable E Return a sequence of lifecycle events. Note that completion of this lifecycle will also trigger disposal","title":"lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/peek-lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopeProvider / peekLifecycle peekLifecycle @Nullable abstract fun peekLifecycle(): E ? Return the last seen lifecycle event, or null if none. Note that is null is returned at subscribe-time, it will be used as a signal to throw a .","title":"Peek lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/peek-lifecycle/#peeklifecycle","text":"@Nullable abstract fun peekLifecycle(): E ? Return the last seen lifecycle event, or null if none. Note that is null is returned at subscribe-time, it will be used as a signal to throw a .","title":"peekLifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/request-scope/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopeProvider / requestScope requestScope open fun requestScope(): CompletableSource","title":"Request scope"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scope-provider/request-scope/#requestscope","text":"open fun requestScope(): CompletableSource","title":"requestScope"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopes LifecycleScopes class LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc. Functions Name Summary resolveScopeFromLifecycle static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E ): CompletableSource Overload for resolving lifecycle providers that defaults to checking start and end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using [`defer`](#).`static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` resolveScopeFromLifecycle(provider: `[`LifecycleScopeProvider`](../-lifecycle-scope-provider/index.md)` `[`E`](resolve-scope-from-lifecycle.md#E)` , checkEndBoundary: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`CompletableSource`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html) br Overload for resolving lifecycle providers allows configuration of checking \"end\" boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended, and otherwise will throw one of LifecycleNotStartedException (if returns null ) or if the lifecycle is ended. To configure the runtime behavior of these exceptions, see AutoDisposePlugins. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer ](#). static fun [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) > resolveScopeFromLifecycle(lifecycle: [ Observable ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html) [ E ](resolve-scope-from-lifecycle.md#E) , endEvent: [ E ](resolve-scope-from-lifecycle.md#E) ): [ CompletableSource ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html) br static fun [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) > resolveScopeFromLifecycle(lifecycle: [ Observable ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html) [ E ](resolve-scope-from-lifecycle.md#E) , endEvent: [ E ](resolve-scope-from-lifecycle.md#E) , comparator: [ Comparator ](http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html) [ E ](resolve-scope-from-lifecycle.md#E) ?): [ CompletableSource`]( http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html )","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/#lifecyclescopes","text":"class LifecycleScopes Utilities for dealing with LifecycleScopeProviders. This includes factories for resolving Completable representations of scopes, corresponding events, etc.","title":"LifecycleScopes"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/#functions","text":"Name Summary resolveScopeFromLifecycle static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E ): CompletableSource Overload for resolving lifecycle providers that defaults to checking start and end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using [`defer`](#).`static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` resolveScopeFromLifecycle(provider: `[`LifecycleScopeProvider`](../-lifecycle-scope-provider/index.md)` `[`E`](resolve-scope-from-lifecycle.md#E)` , checkEndBoundary: `[`Boolean`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/index.html)`): `[`CompletableSource`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html) br Overload for resolving lifecycle providers allows configuration of checking \"end\" boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended, and otherwise will throw one of LifecycleNotStartedException (if returns null ) or if the lifecycle is ended. To configure the runtime behavior of these exceptions, see AutoDisposePlugins. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer ](#). static fun [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) > resolveScopeFromLifecycle(lifecycle: [ Observable ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html) [ E ](resolve-scope-from-lifecycle.md#E) , endEvent: [ E ](resolve-scope-from-lifecycle.md#E) ): [ CompletableSource ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html) br static fun [ Any ](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html) > resolveScopeFromLifecycle(lifecycle: [ Observable ](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html) [ E ](resolve-scope-from-lifecycle.md#E) , endEvent: [ E ](resolve-scope-from-lifecycle.md#E) , comparator: [ Comparator ](http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html) [ E ](resolve-scope-from-lifecycle.md#E) ?): [ CompletableSource`]( http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/CompletableSource.html )","title":"Functions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / LifecycleScopes / resolveScopeFromLifecycle resolveScopeFromLifecycle static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E ): CompletableSource Overload for resolving lifecycle providers that defaults to checking start and end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer`](#). Parameters provider - the LifecycleScopeProvider to resolve. E - the lifecycle event type Exceptions OutsideScopeException - if the `[ LifecycleScopeProvider#correspondingEvents()`](../-lifecycle-scope-provider/corresponding-events.md) throws an OutsideScopeException during resolution. Return a resolved CompletableSource representation of a given provider static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E , checkEndBoundary: Boolean ): CompletableSource Overload for resolving lifecycle providers allows configuration of checking end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended, and otherwise will throw one of LifecycleNotStartedException (if `[ ](../-lifecycle-scope-provider/peek-lifecycle.md) returns null`) or if the lifecycle is ended. To configure the runtime behavior of these exceptions, see AutoDisposePlugins. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer`](#). Parameters provider - the LifecycleScopeProvider to resolve. checkEndBoundary - whether or not to check that the lifecycle has ended E - the lifecycle event type Exceptions OutsideScopeException - if the `[ LifecycleScopeProvider#correspondingEvents()`](../-lifecycle-scope-provider/corresponding-events.md) throws an OutsideScopeException during resolution. Return a resolved CompletableSource representation of a given provider static fun E : Any resolveScopeFromLifecycle(lifecycle: Observable E , endEvent: E ): CompletableSource Parameters lifecycle - the stream of lifecycle events endEvent - the target end event E - the lifecycle event type Return a resolved Completable representation of a given lifecycle, targeting the given event static fun E : Any resolveScopeFromLifecycle(lifecycle: Observable E , endEvent: E , @Nullable comparator: Comparator E ?): CompletableSource Parameters lifecycle - the stream of lifecycle events endEvent - the target end event comparator - an optional comparator for checking event equality. E - the lifecycle event type Return a resolved Completable representation of a given lifecycle, targeting the given event","title":"Resolve scope from lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#resolvescopefromlifecycle","text":"static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E ): CompletableSource Overload for resolving lifecycle providers that defaults to checking start and end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer`](#).","title":"resolveScopeFromLifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#parameters","text":"provider - the LifecycleScopeProvider to resolve. E - the lifecycle event type","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#exceptions","text":"OutsideScopeException - if the `[ LifecycleScopeProvider#correspondingEvents()`](../-lifecycle-scope-provider/corresponding-events.md) throws an OutsideScopeException during resolution. Return a resolved CompletableSource representation of a given provider static fun E : Any resolveScopeFromLifecycle(provider: LifecycleScopeProvider E , checkEndBoundary: Boolean ): CompletableSource Overload for resolving lifecycle providers allows configuration of checking end boundaries of lifecycles. That is, they will ensure that the lifecycle has both started and not ended, and otherwise will throw one of LifecycleNotStartedException (if `[ ](../-lifecycle-scope-provider/peek-lifecycle.md) returns null`) or if the lifecycle is ended. To configure the runtime behavior of these exceptions, see AutoDisposePlugins. Note: This resolves the scope immediately, so consider deferring execution as needed, such as using `[ defer`](#).","title":"Exceptions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#parameters_1","text":"provider - the LifecycleScopeProvider to resolve. checkEndBoundary - whether or not to check that the lifecycle has ended E - the lifecycle event type","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#exceptions_1","text":"OutsideScopeException - if the `[ LifecycleScopeProvider#correspondingEvents()`](../-lifecycle-scope-provider/corresponding-events.md) throws an OutsideScopeException during resolution. Return a resolved CompletableSource representation of a given provider static fun E : Any resolveScopeFromLifecycle(lifecycle: Observable E , endEvent: E ): CompletableSource","title":"Exceptions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#parameters_2","text":"lifecycle - the stream of lifecycle events endEvent - the target end event E - the lifecycle event type Return a resolved Completable representation of a given lifecycle, targeting the given event static fun E : Any resolveScopeFromLifecycle(lifecycle: Observable E , endEvent: E , @Nullable comparator: Comparator E ?): CompletableSource","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-lifecycle-scopes/resolve-scope-from-lifecycle/#parameters_3","text":"lifecycle - the stream of lifecycle events endEvent - the target end event comparator - an optional comparator for checking event equality. E - the lifecycle event type Return a resolved Completable representation of a given lifecycle, targeting the given event","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider TestLifecycleScopeProvider class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException. Types Name Summary TestLifecycle class TestLifecycle Functions Name Summary correspondingEvents fun correspondingEvents(): CorrespondingEventsFunction TestLifecycle create static fun create(): TestLifecycleScopeProvider createInitial static fun createInitial(initialValue: TestLifecycle ): TestLifecycleScopeProvider lifecycle fun lifecycle(): Observable TestLifecycle peekLifecycle fun peekLifecycle(): TestLifecycle ? requestScope fun requestScope(): CompletableSource start fun start(): Unit Start the test lifecycle. stop fun stop(): Unit Stop the test lifecycle.","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/#testlifecyclescopeprovider","text":"class TestLifecycleScopeProvider : LifecycleScopeProvider TestLifecycle Test utility to create LifecycleScopeProvider instances for tests. Supports a start and stop lifecycle. Subscribing when outside of the lifecycle will throw either a LifecycleNotStartedException or LifecycleEndedException.","title":"TestLifecycleScopeProvider"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/#types","text":"Name Summary TestLifecycle class TestLifecycle","title":"Types"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/#functions","text":"Name Summary correspondingEvents fun correspondingEvents(): CorrespondingEventsFunction TestLifecycle create static fun create(): TestLifecycleScopeProvider createInitial static fun createInitial(initialValue: TestLifecycle ): TestLifecycleScopeProvider lifecycle fun lifecycle(): Observable TestLifecycle peekLifecycle fun peekLifecycle(): TestLifecycle ? requestScope fun requestScope(): CompletableSource start fun start(): Unit Start the test lifecycle. stop fun stop(): Unit Stop the test lifecycle.","title":"Functions"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/corresponding-events/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / correspondingEvents correspondingEvents fun correspondingEvents(): CorrespondingEventsFunction TestLifecycle Overrides LifecycleScopeProvider.correspondingEvents","title":"Corresponding events"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/corresponding-events/#correspondingevents","text":"fun correspondingEvents(): CorrespondingEventsFunction TestLifecycle Overrides LifecycleScopeProvider.correspondingEvents","title":"correspondingEvents"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/create-initial/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / createInitial createInitial static fun createInitial(initialValue: TestLifecycle ): TestLifecycleScopeProvider Parameters initialValue - the initial lifecycle event to create the with. Return a new TestLifecycleScopeProvider instance with {@param initialValue} as its initial lifecycle event.","title":"Create initial"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/create-initial/#createinitial","text":"static fun createInitial(initialValue: TestLifecycle ): TestLifecycleScopeProvider","title":"createInitial"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/create-initial/#parameters","text":"initialValue - the initial lifecycle event to create the with. Return a new TestLifecycleScopeProvider instance with {@param initialValue} as its initial lifecycle event.","title":"Parameters"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/create/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / create create static fun create(): TestLifecycleScopeProvider Return a new TestLifecycleScopeProvider instance.","title":"Create"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/create/#create","text":"static fun create(): TestLifecycleScopeProvider Return a new TestLifecycleScopeProvider instance.","title":"create"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / lifecycle lifecycle fun lifecycle(): Observable TestLifecycle Overrides LifecycleScopeProvider.lifecycle","title":"Lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/lifecycle/#lifecycle","text":"fun lifecycle(): Observable TestLifecycle Overrides LifecycleScopeProvider.lifecycle","title":"lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/peek-lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / peekLifecycle peekLifecycle fun peekLifecycle(): TestLifecycle ? Overrides LifecycleScopeProvider.peekLifecycle","title":"Peek lifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/peek-lifecycle/#peeklifecycle","text":"fun peekLifecycle(): TestLifecycle ? Overrides LifecycleScopeProvider.peekLifecycle","title":"peekLifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/request-scope/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / requestScope requestScope fun requestScope(): CompletableSource Overrides LifecycleScopeProvider.requestScope","title":"Request scope"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/request-scope/#requestscope","text":"fun requestScope(): CompletableSource Overrides LifecycleScopeProvider.requestScope","title":"requestScope"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/start/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / start start fun start(): Unit Start the test lifecycle.","title":"Start"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/start/#start","text":"fun start(): Unit Start the test lifecycle.","title":"start"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/stop/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / stop stop fun stop(): Unit Stop the test lifecycle.","title":"Stop"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/stop/#stop","text":"fun stop(): Unit Stop the test lifecycle.","title":"stop"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / TestLifecycle TestLifecycle class TestLifecycle Enum Values Name Summary STARTED STOPPED","title":"Home"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/#testlifecycle","text":"class TestLifecycle","title":"TestLifecycle"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/#enum-values","text":"Name Summary STARTED STOPPED","title":"Enum Values"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/-s-t-a-r-t-e-d/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / TestLifecycle / STARTED STARTED STARTED","title":" s t a r t e d"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/-s-t-a-r-t-e-d/#started","text":"STARTED","title":"STARTED"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/-s-t-o-p-p-e-d/","text":"autodispose-lifecycle / com.uber.autodispose.lifecycle / TestLifecycleScopeProvider / TestLifecycle / STOPPED STOPPED STOPPED","title":" s t o p p e d"},{"location":"1.x/autodispose-lifecycle/com.uber.autodispose.lifecycle/-test-lifecycle-scope-provider/-test-lifecycle/-s-t-o-p-p-e-d/#stopped","text":"STOPPED","title":"STOPPED"},{"location":"1.x/autodispose-rxlifecycle/","text":"autodispose-rxlifecycle AutoDispose extensions for interop with RxLifecycle. This namely supports LifecycleProvider . Packages Name Summary com.ubercab.autodispose.rxlifecycle Index All Types","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/#packages","text":"Name Summary com.ubercab.autodispose.rxlifecycle","title":"Packages"},{"location":"1.x/autodispose-rxlifecycle/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-rxlifecycle/alltypes/","text":"AutoDispose extensions for interop with RxLifecycle. This namely supports LifecycleProvider . All Types Name Summary io.reactivex.Completable (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Flowable (extensions in package com.ubercab.autodispose.rxlifecycle) com.trello.rxlifecycle2.LifecycleProvider (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Maybe (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Observable (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.parallel.ParallelFlowable (extensions in package com.ubercab.autodispose.rxlifecycle) com.ubercab.autodispose.rxlifecycle.RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. io.reactivex.Single (extensions in package com.ubercab.autodispose.rxlifecycle)","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/alltypes/#all-types","text":"Name Summary io.reactivex.Completable (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Flowable (extensions in package com.ubercab.autodispose.rxlifecycle) com.trello.rxlifecycle2.LifecycleProvider (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Maybe (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.Observable (extensions in package com.ubercab.autodispose.rxlifecycle) io.reactivex.parallel.ParallelFlowable (extensions in package com.ubercab.autodispose.rxlifecycle) com.ubercab.autodispose.rxlifecycle.RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. io.reactivex.Single (extensions in package com.ubercab.autodispose.rxlifecycle)","title":"All Types"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle Package com.ubercab.autodispose.rxlifecycle Types Name Summary RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. Extensions for External Classes Name Summary com.trello.rxlifecycle2.LifecycleProvider io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"autodispose-rxlifecycle"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/#package-comubercabautodisposerxlifecycle","text":"","title":"Package com.ubercab.autodispose.rxlifecycle"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/#types","text":"Name Summary RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed.","title":"Types"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/#extensions-for-external-classes","text":"Name Summary com.trello.rxlifecycle2.LifecycleProvider io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"Extensions for External Classes"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / RxLifecycleInterop RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. Functions Name Summary from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` br ``` br `static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` from(provider: LifecycleProvider `[`E`](from.md#E)` , event: `[`E`](from.md#E)`): ScopeProvider` br Factory creating a ScopeProvider representation of a LifecycleProvider. br Example usage: Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ``` |","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/#rxlifecycleinterop","text":"class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed.","title":"RxLifecycleInterop"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/#functions","text":"Name Summary from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` br ``` br `static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` from(provider: LifecycleProvider `[`E`](from.md#E)` , event: `[`E`](from.md#E)`): ScopeProvider` br Factory creating a ScopeProvider representation of a LifecycleProvider. br Example usage: Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ``` |","title":"Functions"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/from/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / RxLifecycleInterop / from from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` Parameters E - the lifecycle event. provider - the LifecycleProvider. Return a ScopeProvider static fun E : Any from(provider: LifecycleProvider E , event: E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ` Parameters E - the lifecycle event. provider - the LifecycleProvider. event - a target event to dispose upon. Return a ScopeProvider","title":"From"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/from/#from","text":"static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) `","title":"from"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/from/#parameters","text":"E - the lifecycle event. provider - the LifecycleProvider. Return a ScopeProvider static fun E : Any from(provider: LifecycleProvider E , event: E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) `","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/-rx-lifecycle-interop/from/#parameters_1","text":"E - the lifecycle event. provider - the LifecycleProvider. event - a target event to dispose upon. Return a ScopeProvider","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/com.trello.rxlifecycle2.-lifecycle-provider/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / com.trello.rxlifecycle2.LifecycleProvider Extensions for com.trello.rxlifecycle2.LifecycleProvider Name Summary scope fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/com.trello.rxlifecycle2.-lifecycle-provider/#extensions-for-comtrellorxlifecycle2lifecycleprovider","text":"Name Summary scope fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Extensions for com.trello.rxlifecycle2.LifecycleProvider"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/com.trello.rxlifecycle2.-lifecycle-provider/scope/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / com.trello.rxlifecycle2.LifecycleProvider / scope scope inline fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Scope"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/com.trello.rxlifecycle2.-lifecycle-provider/scope/#scope","text":"inline fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"scope"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-completable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary autoDisposable fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary autoDisposable fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Completable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-completable/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Completable / autoDisposable autoDisposable @CheckReturnValue inline fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-completable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-completable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-flowable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary autoDisposable fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary autoDisposable fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Flowable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-flowable/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Flowable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-flowable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-maybe/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary autoDisposable fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary autoDisposable fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Maybe"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-maybe/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Maybe / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-maybe/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-maybe/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-observable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary autoDisposable fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary autoDisposable fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-observable/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Observable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-observable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-observable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-single/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Single Extensions for io.reactivex.Single Name Summary autoDisposable fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary autoDisposable fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Single"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-single/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.Single / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-single/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.-single/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.parallel.-parallel-flowable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.parallel.ParallelFlowable Extensions for io.reactivex.parallel.ParallelFlowable Name Summary autoDisposable fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.parallel.-parallel-flowable/#extensions-for-ioreactivexparallelparallelflowable","text":"Name Summary autoDisposable fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.parallel.ParallelFlowable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/","text":"autodispose-rxlifecycle / com.ubercab.autodispose.rxlifecycle / io.reactivex.parallel.ParallelFlowable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle/com.ubercab.autodispose.rxlifecycle/io.reactivex.parallel.-parallel-flowable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/","text":"autodispose-rxlifecycle3 AutoDispose extensions for interop with RxLifecycle. This namely supports LifecycleProvider . Packages Name Summary com.ubercab.autodispose.rxlifecycle3 Index All Types","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/#packages","text":"Name Summary com.ubercab.autodispose.rxlifecycle3","title":"Packages"},{"location":"1.x/autodispose-rxlifecycle3/#index","text":"All Types","title":"Index"},{"location":"1.x/autodispose-rxlifecycle3/alltypes/","text":"AutoDispose extensions for interop with RxLifecycle. This namely supports LifecycleProvider . All Types Name Summary io.reactivex.Completable (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Flowable (extensions in package com.ubercab.autodispose.rxlifecycle3) com.trello.rxlifecycle3.LifecycleProvider (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Maybe (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Observable (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.parallel.ParallelFlowable (extensions in package com.ubercab.autodispose.rxlifecycle3) com.ubercab.autodispose.rxlifecycle3.RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. io.reactivex.Single (extensions in package com.ubercab.autodispose.rxlifecycle3)","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/alltypes/#all-types","text":"Name Summary io.reactivex.Completable (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Flowable (extensions in package com.ubercab.autodispose.rxlifecycle3) com.trello.rxlifecycle3.LifecycleProvider (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Maybe (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.Observable (extensions in package com.ubercab.autodispose.rxlifecycle3) io.reactivex.parallel.ParallelFlowable (extensions in package com.ubercab.autodispose.rxlifecycle3) com.ubercab.autodispose.rxlifecycle3.RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. io.reactivex.Single (extensions in package com.ubercab.autodispose.rxlifecycle3)","title":"All Types"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 Package com.ubercab.autodispose.rxlifecycle3 Types Name Summary RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. Extensions for External Classes Name Summary com.trello.rxlifecycle3.LifecycleProvider io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"autodispose-rxlifecycle3"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/#package-comubercabautodisposerxlifecycle3","text":"","title":"Package com.ubercab.autodispose.rxlifecycle3"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/#types","text":"Name Summary RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed.","title":"Types"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/#extensions-for-external-classes","text":"Name Summary com.trello.rxlifecycle3.LifecycleProvider io.reactivex.Completable io.reactivex.Flowable io.reactivex.Maybe io.reactivex.Observable io.reactivex.Single io.reactivex.parallel.ParallelFlowable","title":"Extensions for External Classes"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / RxLifecycleInterop RxLifecycleInterop class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed. Functions Name Summary from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` br ``` br `static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` from(provider: LifecycleProvider `[`E`](from.md#E)` , event: `[`E`](from.md#E)`): ScopeProvider` br Factory creating a ScopeProvider representation of a LifecycleProvider. br Example usage: Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ``` |","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/#rxlifecycleinterop","text":"class RxLifecycleInterop Interop for RxLifecycle. This provides static factory methods to convert s into ScopeProvider representations. Note: RxLifecycle treats the OutsideLifecycleException as normal terminal event. In such cases the stream is just disposed.","title":"RxLifecycleInterop"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/#functions","text":"Name Summary from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` br ``` br `static fun E : `[`Any`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/index.html)` from(provider: LifecycleProvider `[`E`](from.md#E)` , event: `[`E`](from.md#E)`): ScopeProvider` br Factory creating a ScopeProvider representation of a LifecycleProvider. br Example usage: Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ``` |","title":"Functions"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/from/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / RxLifecycleInterop / from from static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) ` Parameters E - the lifecycle event. provider - the LifecycleProvider. Return a ScopeProvider static fun E : Any from(provider: LifecycleProvider E , event: E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) ` Parameters E - the lifecycle event. provider - the LifecycleProvider. event - a target event to dispose upon. Return a ScopeProvider","title":"From"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/from/#from","text":"static fun E : Any from(provider: LifecycleProvider E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider))) .subscribe(...) `","title":"from"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/from/#parameters","text":"E - the lifecycle event. provider - the LifecycleProvider. Return a ScopeProvider static fun E : Any from(provider: LifecycleProvider E , event: E ): ScopeProvider Factory creating a ScopeProvider representation of a LifecycleProvider. Example usage: ` Observable.just(1) .as(autoDisposable(RxLifecycleInterop.from(lifecycleProvider, event))) .subscribe(...) `","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/-rx-lifecycle-interop/from/#parameters_1","text":"E - the lifecycle event. provider - the LifecycleProvider. event - a target event to dispose upon. Return a ScopeProvider","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/com.trello.rxlifecycle3.-lifecycle-provider/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / com.trello.rxlifecycle3.LifecycleProvider Extensions for com.trello.rxlifecycle3.LifecycleProvider Name Summary scope fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/com.trello.rxlifecycle3.-lifecycle-provider/#extensions-for-comtrellorxlifecycle3lifecycleprovider","text":"Name Summary scope fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Extensions for com.trello.rxlifecycle3.LifecycleProvider"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/com.trello.rxlifecycle3.-lifecycle-provider/scope/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / com.trello.rxlifecycle3.LifecycleProvider / scope scope inline fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"Scope"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/com.trello.rxlifecycle3.-lifecycle-provider/scope/#scope","text":"inline fun E LifecycleProvider E .scope(event: E ? = null): ScopeProvider Extension that converts a LifecycleProvider to ScopeProvider .","title":"scope"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-completable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Completable Extensions for io.reactivex.Completable Name Summary autoDisposable fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-completable/#extensions-for-ioreactivexcompletable","text":"Name Summary autoDisposable fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Completable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-completable/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Completable / autoDisposable autoDisposable @CheckReturnValue inline fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-completable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun E Completable .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): CompletableSubscribeProxy Extension that proxies to Completable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-completable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-flowable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Flowable Extensions for io.reactivex.Flowable Name Summary autoDisposable fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-flowable/#extensions-for-ioreactivexflowable","text":"Name Summary autoDisposable fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Flowable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-flowable/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Flowable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Flowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): FlowableSubscribeProxy T Extension that proxies to Flowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-flowable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-maybe/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Maybe Extensions for io.reactivex.Maybe Name Summary autoDisposable fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-maybe/#extensions-for-ioreactivexmaybe","text":"Name Summary autoDisposable fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Maybe"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-maybe/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Maybe / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-maybe/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Maybe T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): MaybeSubscribeProxy T Extension that proxies to Maybe.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-maybe/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-observable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Observable Extensions for io.reactivex.Observable Name Summary autoDisposable fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-observable/#extensions-for-ioreactivexobservable","text":"Name Summary autoDisposable fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Observable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-observable/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Observable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-observable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Observable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ObservableSubscribeProxy T Extension that proxies to Observable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-observable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-single/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Single Extensions for io.reactivex.Single Name Summary autoDisposable fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-single/#extensions-for-ioreactivexsingle","text":"Name Summary autoDisposable fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.Single"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-single/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.Single / autoDisposable autoDisposable @CheckReturnValue inline fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-single/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E Single T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): SingleSubscribeProxy T Extension that proxies to Single.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.-single/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.parallel.-parallel-flowable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.parallel.ParallelFlowable Extensions for io.reactivex.parallel.ParallelFlowable Name Summary autoDisposable fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Home"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.parallel.-parallel-flowable/#extensions-for-ioreactivexparallelparallelflowable","text":"Name Summary autoDisposable fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"Extensions for io.reactivex.parallel.ParallelFlowable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.parallel.-parallel-flowable/auto-disposable/","text":"autodispose-rxlifecycle3 / com.ubercab.autodispose.rxlifecycle3 / io.reactivex.parallel.ParallelFlowable / autoDisposable autoDisposable @CheckReturnValue inline fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed. Parameters lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Auto disposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.parallel.-parallel-flowable/auto-disposable/#autodisposable","text":"@CheckReturnValue inline fun T, E ParallelFlowable T .autoDisposable(lifecycleProvider: LifecycleProvider E , event: E ? = null): ParallelFlowableSubscribeProxy T Extension that proxies to ParallelFlowable.as + AutoDispose.autoDisposable and takes an event when subscription will be disposed.","title":"autoDisposable"},{"location":"1.x/autodispose-rxlifecycle3/com.ubercab.autodispose.rxlifecycle3/io.reactivex.parallel.-parallel-flowable/auto-disposable/#parameters","text":"lifecycleProvider - The lifecycle provider from RxLifecycle. event - Optional lifecycle event when subscription will be disposed.","title":"Parameters"}]}